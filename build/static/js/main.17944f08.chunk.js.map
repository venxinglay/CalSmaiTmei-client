{"version":3,"sources":["components/SideMenu.js","components/Header.js","components/basicCal/component/Display.js","components/basicCal/component/Button.js","components/basicCal/component/ButtonPanel.js","components/basicCal/logic/operate.js","components/basicCal/logic/calculate.js","components/basicCal/logic/isNumber.js","components/basicCal/component/App.js","components/services/UrlService.js","components/SignIn.js","components/SignUp.js","components/ConfirmEmail.js","components/ConfirmPassword.js","components/randomizer/Nav.js","components/randomizer/Body.js","components/randomizer/App.js","components/randomizer/InformationRandomizer.js","components/UnitConverter.js","components/Main.js","App.js","reportWebVitals.js","index.js","components/ScientificCalculator.js"],"names":["SideMenu","title","path","cName","Header","props","shows","useState","sideMenu","setSideMenu","history","useHistory","showSideMenu","user","className","onClick","sessionStorage","removeItem","setUser","push","to","id","Provider","value","color","class","map","item","index","icon","Display","this","React","Component","Button","handleClick","clickHandler","name","orange","wide","bbb","join","trim","ButtonPanel","buttonName","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","Error","calculate","obj","total","next","test","length","parseFloat","includes","memory","BasicCal","state","setState","handleKeyDown","event","key","preventDefault","clearLastChar","substring","document","addEventListener","removeEventListener","apiDomain","UrlService","SignIn","useForm","criteriaMode","register","handleSubmit","errors","Container","Row","Form","fluid","onSubmit","data","axios","post","loginUrl","then","res","setItem","access_token","catch","err","console","log","alert","response","message","Col","lg","md","sm","xs","Group","controlId","Label","Control","autoComplete","ref","required","pattern","type","placeholder","render","messages","Object","entries","style","Text","textAlign","fontSize","marginLeft","textDecoration","variant","SignUp","watch","password","useRef","current","registerUrl","email","minLength","maxLength","validate","password_confirmation","fontWeight","ConfirmEmail","forgotUrl","ConfirmPassword","defaultValues","token","match","params","resetPasswordUrl","password_repeat","Nav","active","setActive","onSelectRandomizer","handleSelectRandomizer","Body","currentTextareaValue","qty","createRef","bind","handleChange","b","split","filter","teamGenerator","onGetQty","onGetData","getType","target","teamGen","picker","customList","getResult","as","rows","onChange","customListItem","randomizer","handleGetQty","handleGetData","items","handleRandomizer","activeRandomizer","setResult","result","handleSave","tGenerator","SaveRandomizer","handleType","handleSelectConverter","con","size","startIcon","margin","outline","InteractiveList","setData","useEffect","get","SaveRandomizerList","Grid","container","justify","Typography","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","component","scope","ExportUrl","responseType","fileURL","window","URL","createObjectURL","Blob","fileLink","createElement","href","setAttribute","body","appendChild","click","cn","args","Boolean","Tab","children","useTabState","isActive","UnitConverter","setIndex","setValue","unitFrom","setUnitFrom","unitTo","setUnitTo","e","multiple","converted","Main","ready","componentDidMount","currentUserProfileUrl","finally","exact","from","InformationRandomizer","ScientificCalculator","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","headers","common","getItem","ReactDOM","StrictMode","getElementById","AutoScalingText","scale","node","actualScale","parentNode","offsetWidth","transform","CalculatorDisplay","language","navigator","isNumeric","forEach","formattedValue","toLocaleString","useGrouping","maximumFractionDigits","CalculatorKey","onPress","onPoint","CalculatorOperations","prevValue","nextValue","nthRoot","Math","pow","xPowY","yPowX","logY","displayValue","operator","waitingForOperand","isDot","done","shift","degree","ee","isMemoryActive","isBracketsActive","isLeftBracket","isRightBracket","isDigit","isOperator","countBracket","checkLeftBracket","memory_plus","memory_minus","memory_recall","degreeClick","shiftClick","keyDown","inputDigit","parseInt","performOperation","inputDot","inputPercent","clearDisplay","clearAll","newValue","String","fixedDigits","replace","toFixed","digit","hasDot","integer","nextOperator","eval","inputValue","currentValue","toPrecision","prevState","temp","random","sin","PI","cos","tan","sinh","cosh","tanh","asin","acos","atan","asinh","acosh","atanh","sqrt","cbrt","indexOf","i","resultNegative","j","log10","log2","exp","clearText","backgroundColor","leftBracket","rightBracket","memoryClear","memoryPlus","memoryMinus","memoryRecall","toggleSign","power2","power3","exponential","twoPowerX","tenPowerX","multiplicativeInverse","squareRoot","cubeRoot","factorial","sinInverse","cosInverse","tanhInverse","sinhInverse","coshInverse","rand"],"mappings":"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","file":"static/js/main.17944f08.chunk.js","sourcesContent":["export const SideMenu = [\n  {\n    title: 'CAL SMEi-TMEi',\n    path: '/BasicCalculator',\n    cName: 'nav-text-brand'\n  },\n  {\n    title: 'Basic Calculator',\n    path: '/BasicCalculator',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Scientific Calculator',\n    path: '/ScientificCalculator',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Unit Converter',\n    path: '/UnitConverter',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Randomizer',\n    path: '/randomizer',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Randomizer Information',\n    path: '/randomizer-information',\n    cName: 'nav-text'\n  },\n];","import React, { useState } from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport { SideMenu } from '../components/SideMenu.js';\nimport './Authentication.css';\nimport { IconContext } from 'react-icons';\nimport Avatar from '@material-ui/core/Avatar';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nfunction Header(props) {\n    const [sideMenu, setSideMenu] = useState(false);\n    const history = useHistory();\n    const showSideMenu = () => setSideMenu(!sideMenu);\n\n    const handleLogout = () => {\n        sessionStorage.removeItem('access_token');\n        props.setUser(null);\n        history.push('/signIn');\n    };\n    let shows;\n    if (props.user) {\n        shows = (\n            <div className='login-logout'>\n                <Link onClick={handleLogout} className='login'>\n                    Log out\n                </Link>\n            </div>\n        );\n    } else {\n        shows = (\n            <div className='login-logout'>\n                <Link to='/SignIn' className='login'>\n                    Log In\n                </Link>\n            </div>\n        );\n    }\n    return (\n        <div id='header'>\n            <IconContext.Provider value={{ color: '#52616b' }}>\n                <div className='navbar'>\n                    <Link to='#' className='menu-bars'>\n                        <FaIcons.FaBars onClick={showSideMenu} />\n                    </Link>\n                    <span class='navbar-brand h1'>CAL SMEi-TMEi</span>\n                    {shows}\n                </div>\n\n                <nav className={sideMenu ? 'nav-menu active' : 'nav-menu'}>\n                    <ul className='nav-menu-items' onClick={showSideMenu}>\n                        <li className='navbar-toggle'>\n                            <Link to='#' className='menu-close'>\n                                <AiIcons.AiOutlineClose />\n                            </Link>\n                        </li>\n                        {SideMenu.map((item, index) => {\n                            return (\n                                <li key={index} className={item.cName}>\n                                    <Link to={item.path}>\n                                        {item.icon}\n                                        <span>{item.title}</span>\n                                    </Link>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </nav>\n            </IconContext.Provider>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nexport default class Display extends React.Component {\n    static propTypes = {\n        value: PropTypes.string,\n    };\n\n\n    render() {\n        return (\n            <div className=\"component-display\">\n                <div className=\"result\">{this.props.value}</div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nexport default class Button extends React.Component {\n\n  static propTypes = {\n    name: PropTypes.string,\n    orange: PropTypes.bool,\n    bbb: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func,\n  };\n\n  handleClick = () => {\n    this.props.clickHandler(this.props.name);\n  };\n\n  render() {\n    const className = [\n      \"component-button\",\n      this.props.orange ? \"orange\" : \"\",\n      this.props.wide ? \"wide\" : \"\",\n      this.props.bbb ? \"bbb\" : \"\",\n    ];\n\n    return (\n\n      <div className={className.join(\" \").trim()}>\n        <button onClick={this.handleClick}>{this.props.name}</button>\n      </div>\n    );\n  }\n}\n","import Button from \"./Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nexport default class ButtonPanel extends React.Component {\n  static propTypes = {\n    clickHandler: PropTypes.func,\n  };\n\n  handleClick = buttonName => {\n    this.props.clickHandler(buttonName);\n  };\n\n\n  render() {\n    return (\n      <div className=\"component-button-panel\">\n        <div>\n          <Button name=\"mc\" clickHandler={this.handleClick} />\n          <Button name=\"m+\" clickHandler={this.handleClick} />\n          <Button name=\"m-\" clickHandler={this.handleClick} />\n          <Button name=\"mr\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"AC\" clickHandler={this.handleClick} orange />\n          <Button name=\"-/+\" clickHandler={this.handleClick} />\n          <Button name=\"%\" clickHandler={this.handleClick} />\n          <Button name=\"÷\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"7\" clickHandler={this.handleClick} />\n          <Button name=\"8\" clickHandler={this.handleClick} />\n          <Button name=\"9\" clickHandler={this.handleClick} />\n          <Button name=\"x\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"4\" clickHandler={this.handleClick} />\n          <Button name=\"5\" clickHandler={this.handleClick} />\n          <Button name=\"6\" clickHandler={this.handleClick} />\n          <Button name=\"-\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"1\" clickHandler={this.handleClick} />\n          <Button name=\"2\" clickHandler={this.handleClick} />\n          <Button name=\"3\" clickHandler={this.handleClick} />\n          <Button name=\"+\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"0\" clickHandler={this.handleClick} wide />\n          <Button name=\".\" clickHandler={this.handleClick} />\n          <Button name=\"=\" clickHandler={this.handleClick} bbb />\n        </div>\n      </div>\n    );\n  }\n}\n","import Big from \"big.js\";\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || \"0\");\n  const two = Big(numberTwo || (operation === \"÷\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\n  let temp = 0;\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"%\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"÷\") {\n    if (two == \"0\") {\n      \n      return \"error\";\n    } else {\n      temp = one.div(two);\n      return temp.toString();\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If the length is over 9 prevent input from the user \n\n    if (obj.next?.length > 9)\n      return;\n\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.total != 0) {\n      const result = parseFloat(obj.total) / 100;\n      return {\n        total: result,\n        next: parseFloat(obj.next) / 100,\n        operation: null\n\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n\n  if (buttonName === 'mc') {\n    return {\n      memory: null\n    };\n  }\n  if (buttonName === 'mr') {\n\n    return {\n\n      // total: obj.memory\n      next: obj.memory\n    };\n  }\n  if (buttonName === 'm-') {\n    if (obj.next === null) {\n      obj.next = obj.total\n    }\n    return {\n      memory: \"-\" + obj.next\n    };\n  }\n  if (buttonName === 'm+') {\n    if (obj.next === null) {\n      obj.next = obj.total\n    }\n    return {\n      memory: obj.next\n    };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"-/+\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n\n\n\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","export default function isNumber(item) {\n\n  return /[0-9]+/.test(item);\n}\n","import React from 'react';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\nimport calculate from '../logic/calculate';\nimport './App.css';\n\nexport default class BasicCal extends React.Component {\n    state = {\n        total: null,\n        next: null,\n        operation: null,\n        memory: null,\n    };\n\n    handleClick = (buttonName) => {\n        this.setState(calculate(this.state, buttonName));\n    };\n\n    clearLastChar() {\n        this.setState({\n            next: this.state.next.substring(0, this.state.next.length - 1) || '0',\n        });\n    }\n\n    handleKeyDown = (event) => {\n        let { key } = event;\n\n        if (key === 'Enter') key = '=';\n\n        if (/\\d/.test(key)) {\n            event.preventDefault();\n            this.setState(calculate(this.state, key));\n        } else if (key === '*' || key === '-' || key === '+' || key === '/' || key === '=') {\n            event.preventDefault();\n            if (key === '*') {\n                key = 'x';\n            }\n            this.setState(calculate(this.state, key));\n        } else if (key === '.') {\n            event.preventDefault();\n            this.setState(calculate(this.state, '.'));\n        } else if (key === '%') {\n            event.preventDefault();\n            this.setState(calculate(this.state, '%'));\n        } else if (key === 'Backspace') {\n            event.preventDefault();\n            this.clearLastChar();\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    render() {\n        return (\n            <div id='basicCal'>\n                <div  className='component-app'>\n                    <Display value={this.state.next || this.state.total || '0'} />\n                    <ButtonPanel clickHandler={this.handleClick} />\n                </div>\n            </div>\n        );\n    }\n}\n","\n// if (process.env.NODE_ENV === \"production\") {\n//   apiDomain = \"https://calsmaitmei-server.venxing.me/api/\";\n// } else {\n//   apiDomain = \"http://calsmaitmei-app.test/api/\";\n// }\n\nlet apiDomain = \"https://calsmaitmei-server.venxing.me/api/\";\n\nclass UrlService {\n  static loginUrl() {\n    return apiDomain + \"login\";\n  }\n  static currentUserProfileUrl() {\n    return apiDomain + \"user\";\n  }\n  static registerUrl() {\n    return apiDomain + \"register\";\n  }\n  static forgotUrl() {\n    return apiDomain + 'password/email';\n  }\n  static resetPasswordUrl() {\n    return apiDomain + 'password/reset';\n  }\n  static handleRandomizer() {\n    return apiDomain + 'randomizer/generate';\n  }\n  static SaveRandomizer() {\n    return apiDomain + 'randomizer';\n  }\n  static SaveRandomizerList() {\n    return apiDomain + 'randomizer';\n  }\n  static DeleteRandomizerList(id) {\n    return apiDomain + 'randomizer/' + id;\n  }\n  static ExportUrl() {\n    return apiDomain + 'export';\n  }\n\n}\n\nexport default UrlService;","import '../App.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport UrlService from './services/UrlService'\nimport axios from \"axios\"\n\n\n\n\n\n\n\nconst SignIn = (props) => {\n    const history = useHistory();\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    //Handle Login\n    const onSubmit = (data) => {\n        axios.post(UrlService.loginUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    sessionStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                console.log(err)\n                alert(err.response.data.message)\n            }\n        )\n    }\n\n    return (\n        <>\n            <Container id='sign-in'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign In</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Let's Get Started</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(([type, message]) => (\n                                                    <p style={{ color: 'red' }} key={type}>\n                                                        {message}\n                                                    </p>\n                                                ))\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicPassword'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        className='from-control'\n                                        type='password'\n                                        placeholder='Enter Password'\n                                        name='password'\n                                        ref={register({\n                                            required: 'This is required.'\n                                        })}\n                                        required\n                                    />\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Link\n                                to='/password/forgot'\n                                style={{\n                                    fontSize: '800',\n                                }}>\n                                Forgotten Password?\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Don't have an account yet?\n                            <Link\n                                to='/signup'\n                                style={{\n                                    fontSize: '800',\n                                    color: '#52616b',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign Up\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign In\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignIn;","import React, { useRef } from 'react';\n\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport UrlService from './services/UrlService';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst SignUp = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const history = useHistory();\n    const onSubmit = (data) => {\n\n        axios.post(UrlService.registerUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    sessionStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                console.log(err)\n            }\n            \n            // err => {\n            //     alert(err.response.data.errors.email.join(', '))\n            // }\n        )\n    }\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='sign-up'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign Up</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Create Your Free Account</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\n\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message: 'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current || 'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_confirmation && (\n                                        <p style={{ color: 'red' }}>{errors.password_confirmation.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Already have an account?\n                            <Link\n                                to='/signin'\n                                style={{\n                                    color: '#52616b',\n                                    fontWeight: '600px',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign In\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign Up\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignUp;","import React from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmEmail = () => {\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const onSubmit = (data) => {\n        axios.post(UrlService.forgotUrl(), data).then((res) => {\n            console.log(res);\n            alert(res.data.message)\n        }).catch((err) => {\n            alert(err.response.data.message)\n        });\n    };\n\n    return (\n        <>\n            <Container id='confirm-email'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your email</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(\n                                                    ([type, message]) => (\n                                                        <p style={{ color: 'red' }} key={type}>\n                                                            {message}\n                                                        </p>\n                                                    )\n                                                )\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-email-button' variant='white' type='submit'>\n                                Send Password Reset Link\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmEmail;\n","import React, { useRef, useState } from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmPassword = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n        defaultValues: {\n            token: props.match.params.token,\n        }\n    });\n\n    // Handle Reset Password\n    const onSubmit = (data) => {\n        axios.post(UrlService.resetPasswordUrl(), data).then((res) => {\n            alert(res.data.message)\n        }).catch((err) => {\n            alert(err.response.data.message)\n        });\n    };\n\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='confirm-password'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your new password</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>New Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='token'\n                                        type='hidden'\n                                        ref={register}\n                                    />\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message:\n                                                    'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current ||\n                                                'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_repeat && (\n                                        <p style={{ color: 'red' }}>\n                                            {errors.password_repeat.message}\n                                        </p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-password-button' variant='white' type='submit'>\n                                Reset Password\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmPassword;\n","import React from 'react'\nimport './App.css';\n\nconst Nav = (props) => {\n    const navMenu = [\n        'Random Picker',\n        'Custom List',\n        'Decision Maker',\n        'Name Picker',\n        'Team Generator',\n        'Yes or No',\n    ];\n    const [active, setActive] = React.useState(null);\n\n    const handleSelectRandomizer = (id, item) => {\n        setActive(id)\n        props.onSelectRandomizer(item)\n    };\n\n    let randomizer_nav = \"randomizer-nav\";\n    return (\n        <ul className='randomizer-navbar'>\n            {\n                navMenu.map((item, index) => (\n                    <li id=\"myDIV\" className={\n                        index === active ? \"active\" : \"randomizer-nav\"\n                    } onClick={() => handleSelectRandomizer(index, item)}>{item}</li>\n                ))\n            }\n        </ul>\n    );\n};\n\nexport default Nav;\n\n        // <li className='randomizer-nav active' onClick={() => handleSelectRandomizer('Custom List')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Decision Maker')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Name Picker')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Team Generator')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Yes or No')}>a</li>\n","import React, { useLayoutEffect } from 'react';\nimport { Button, Row, Col, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\n\nexport default class Body extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTextareaValue: '',\n            qty: React.createRef(),\n            data: \"\",\n        };\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        const a = this.state.data;\n        const b = a.split('\\n').filter((item) => item !== '');\n\n        if (this.props.teamGenerator) {\n            this.props.onGetQty(this.state.qty.current.value);\n            this.props.onGetData(b);\n        } else {\n            this.props.onGetData(b);\n        }\n        if (this.props.getType == 6) {\n            this.setState({\n                data: \"Yes\\nNo\"\n            })\n        }\n\n    }\n    \n    handleChange(event) {\n        this.setState({ data: event.target.value });\n    }\n\n    render() {\n        let shows;\n        let teamGen;\n        let picker;\n        let customList;\n\n        if (this.props.teamGenerator) {\n            shows = (\n                <div className=\"justify-content-center\">\n                    <label className='txt-group justify-content-center'>Groups </label>\n                    <input type='number' ref={this.state.qty} className='input-qty' />\n                </div>\n            );\n\n            teamGen = (\n                <div className='result-body-teamgen'>\n                    {this.props.getResult.map((item, index) => (\n                        <ul key={index}>\n                            <h5>Team {index + 1}</h5>\n                            <li>{item.join(' /  ')}</li>\n                        </ul>\n                    ))}\n                </div>\n            );\n        }\n\n\n        picker = <div className='result-body'>{this.props.getResult}</div>;\n\n        customList = (\n            <div className='result-body-teamgen'>\n                {this.props.getResult.map((item, index) => (\n                    <ul key={index}>\n                        {index + 1}. {item}\n                    </ul>\n                ))}\n            </div>\n        );\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Row className='randomizer-body'>\n                    <Form.Group controlId='exampleForm.ControlTextarea1' className='result-item-nav'>\n                        <Form.Label>ITEMS :</Form.Label>\n                        <Form.Control\n                            as='textarea'\n                            rows={15}\n                            className='item-body'\n                            value={this.state.data}\n                            onChange={this.handleChange}\n                        />\n                    </Form.Group>\n                    <Form.Group className='result-item-nav'>\n                        <Form.Label>RESULT : </Form.Label>\n                        {this.props.teamGenerator\n                            ? teamGen\n                            : this.props.customListItem\n                                ? customList\n                                : picker}\n                    </Form.Group>\n                </Row>\n                <Row className='justify-content-md-center body-sumbit'>\n                    <Col md='auto'>{shows}</Col>\n                    <Col md=' auto'>\n                        <Button\n                            as='input'\n                            type='submit'\n                            variant='secondary'\n                            value='Submit'\n                            className='submit'\n                        />{' '}\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n","import react, { Component } from 'react';\nimport Nav from './Nav';\nimport Body from './Body';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\nimport axios from 'axios';\nimport UrlService from '../services/UrlService';\nimport { Redirect } from 'react-router';\nimport SaveIcon from '@material-ui/icons/Save';\n\nexport default class randomizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            result: [],\n            activeRandomizer: 1,\n            qty: 0,\n            tGenerator: false,\n            customList: false,\n        };\n        this.handleSelectConverter = this.handleSelectConverter.bind(this);\n    }\n\n    handleSelectConverter(con) {\n        this.setState({\n            activeRandomizer: this.handleType(con),\n        });\n    }\n\n    setResult(result) {\n        this.setState({\n            result: result,\n        });\n    }\n\n    handleGetQty = (qty) => {\n        this.setState({\n            qty: qty,\n        });\n    };\n\n    handleGetData = (items) => {\n        this.setState({\n            items,\n        });\n        axios\n            .post(UrlService.handleRandomizer(), {\n                type: this.state.activeRandomizer,\n                data: { items, qty: this.state.qty },\n            })\n            .then((res) => {\n                console.log(res);\n                this.setResult(res.data.result);\n                console.log(this.state.result);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    handleSave = () => {\n        let data = {};\n        if (this.state.tGenerator) {\n            data = {\n                type: this.state.activeRandomizer,\n                data: {\n                    items: this.state.items,\n                    qty: this.state.activeRandomizer,\n                    result: this.state.result,\n                },\n            };\n        } else {\n            data = {\n                type: this.state.activeRandomizer,\n                data: { items: this.state.items, result: this.state.result },\n            };\n        }\n        console.log(data);\n\n        axios\n            .post(UrlService.SaveRandomizer(), data)\n            .then((res) => {\n                alert(res.data.message);\n            })\n            .catch((err) => {\n                alert(err.response.data.message);\n            });\n    };\n\n    handleType = (data) => {\n        let type = null;\n        this.setState({ tGenerator: false, customList: false, result: [], items: [] });\n        switch (data) {\n            case 'Random Picker':\n                type = 1;\n                break;\n            case 'Custom List':\n                type = 2;\n                this.setState({\n                    customList: true,\n                });\n                break;\n            case 'Decision Maker':\n                type = 3;\n                break;\n            case 'Name Picker':\n                type = 4;\n                break;\n            case 'Team Generator':\n                type = 5;\n                this.setState({\n                    tGenerator: true,\n                });\n                break;\n            case 'Yes or No':\n                type = 6;\n                break;\n            default:\n                break;\n        }\n        return type;\n    };\n\n    render() {\n        if (!this.props.user) {\n            return <Redirect to='/SignIn' />;\n        }\n        return (\n            <div className=\"randomizer-dev\">\n                <Row className='justify-content-end m-2'>\n                    <Button\n                        variant='contained'\n                        size='meddium'\n                        onClick={this.handleSave}\n                        startIcon={<SaveIcon />}\n                        style={{ margin: '20px 5px', outline: 'none' }}\n                    >\n                        Save\n                    </Button>\n                </Row>\n                <div className='randomizer'>\n                    <Row>\n                        <Nav onSelectRandomizer={this.handleSelectConverter} />\n                        <Body\n                            onGetData={this.handleGetData}\n                            teamGenerator={this.state.tGenerator}\n                            customListItem={this.state.customList}\n                            getResult={this.state.result}\n                            onGetQty={this.handleGetQty}\n                            getType={this.state.activeRandomizer}\n                        />\n                    </Row>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { useEffect } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport UrlService from '../services/UrlService';\nimport Table from '@material-ui/core/Table';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport axios from 'axios';\n\nexport default function InteractiveList() {\n    const [data, setData] = React.useState([]);\n\n    useEffect(() => {\n        axios\n            .get(UrlService.SaveRandomizerList())\n            .then((res) => {\n                setData(res.data);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, []);\n\n    const handleExport = () => {\n\n        axios\n            .get(UrlService.ExportUrl(), {\n                responseType: \"blob\",\n            })\n            .then((response) => {\n                const fileURL = window.URL.createObjectURL(new Blob([response.data]));\n                const fileLink = document.createElement(\"a\");\n\n                fileLink.href = fileURL;\n                fileLink.setAttribute(\"download\", \"random.xls\");\n                document.body.appendChild(fileLink);\n\n                fileLink.click();\n            });\n    };\n    return (\n        <div style={{ margin: '50px' }}>\n            <Grid container justify='center'>\n                <Grid item xs={8}>\n                    <Typography variant='h6'>Randomizer Infromation</Typography>\n                    <Grid>\n                        <Table size='small' aria-label='a dense table'>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>#</TableCell>\n                                    <TableCell align='right'>Type</TableCell>\n                                    <TableCell align='right'>Items</TableCell>\n                                    <TableCell align='right'>Result</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((item, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component='th' scope='row'>\n                                            {index + 1}\n                                        </TableCell>\n                                        <TableCell align='right'>{item.type}</TableCell>\n                                        <TableCell align='right'>\n                                            {item.data.items.join(' | ')}\n                                        </TableCell>\n                                        <TableCell align='right'>\n                                            {item.data.result.join(' | ')}\n                                        </TableCell>\n                                        {/*<TableCell align=\"right\">\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={handleDelete(item.id)}\n                                                startIcon={<DeleteIcon />}\n                                            >\n                                            </Button>\n                                        </TableCell>\n                                        */}\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Grid>\n                </Grid>\n                <Grid style={{ margin: '30px' }}>\n                    <Button\n                        variant='contained'\n                        className='bg-secondary text-light'\n                        onClick={handleExport}\n                        startIcon={<ImportExportIcon />}\n                    ></Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n// <div className={classes.demo}>\n//     <List>\n//         {data.map((item, index) => (\n\n//             <ListItem>\n//                 <ListItemAvatar>\n//                     <Avatar>\n//                         <FolderIcon />\n//                     </Avatar>\n//                 </ListItemAvatar>\n//                 <ListItemText\n//                     secondary={secondary ? 'Secondary text' : null}\n//                 >{index + 1},  {item.data.items.join(\",\")}  {item.data.result}</ListItemText>\n//                 <ListItemText\n//                     secondary={secondary ? 'Secondary text' : null}\n//                 ></ListItemText>\n//                 <ListItemText\n\n//                 >{ }</ListItemText>\n//                 <ListItemSecondaryAction>\n//                     <IconButton edge=\"end\" aria-label=\"delete\">\n//                         <DeleteIcon />\n//                     </IconButton>\n//                 </ListItemSecondaryAction>\n//             </ListItem>\n//         ))}\n//     </List>\n// </div>\n","import './UnitConverter.css';\nimport React, { useState, useEffect } from 'react';\nimport { Tabs, useTabState, Panel } from '@bumaga/tabs';\nimport { Col, Row, Button } from 'react-bootstrap';\nimport axios from 'axios';\n\nconst cn = (...args) => args.filter(Boolean).join(' ');\n\nconst Tab = ({ children }) => {\n    const { isActive, onClick } = useTabState();\n\n    return (\n        <button className={cn('tab', isActive && 'active')} onClick={onClick}>\n            {children}\n        </button>\n    );\n};\n\nconst UnitConverter = () => {\n    const [index, setIndex] = useState(0);\n    const [result, setResult] = useState();\n    const [value, setValue] = useState();\n    const [unitFrom, setUnitFrom] = useState([]);\n    const [unitTo, setUnitTo] = useState([]);\n\n    const handleSubmit = () => {\n        axios\n            .get(\n                `https://converter.doxxie.live/convert?from=${unitFrom}&to=${unitTo}&amount=${value}`\n            )\n            .then((res) => {\n                setResult(res.data.converted);\n                console.log(res.data.converted);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    useEffect(() => {\n        setIndex(1);\n    }, []);\n\n    return (\n        <div id='unit-converter'>\n            <Tabs state={[index, setIndex]}>\n                <div className='tab-list'>\n                    <Tab>Length</Tab>\n                    <Tab>Weight</Tab>\n                    <Tab>Volume</Tab>\n                    <Tab>Area</Tab>\n                    <Tab>Data</Tab>\n                    <Tab>Time</Tab>\n                    <Tab>Temperature</Tab>\n                </div>\n                <div className='tabs'>\n                    {/* Length */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m'>Meter</option>\n                                            <option value='km'>Kilometer</option>\n                                            <option value='cm'>Centimeter</option>\n                                            <option value='mm'>Millimeter</option>\n                                            <option value='mi'>Mile</option>\n                                            <option value='yd'>Yard</option>\n                                            <option value='ft'>Feet</option>\n                                            <option value='in'>Inch</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m'>Meter</option>\n                                            <option value='km'>Kilometer</option>\n                                            <option value='cm'>Centimeter</option>\n                                            <option value='mm'>Millimeter</option>\n                                            <option value='mi'>Mile</option>\n                                            <option value='yd'>Yard</option>\n                                            <option value='ft'>Feet</option>\n                                            <option value='in'>Inch</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/*  */}\n                    {/*  */}\n                    {/* Weight */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='g'>Gram</option>\n                                            <option value='kg'>Kilogram</option>\n                                            <option value='mg'>Miligram</option>\n                                            <option value='lb'>Pound</option>\n                                            <option value='t'>Ton</option>\n                                            <option value='mt'>Metric Ton</option>\n                                            <option value='oz'>Ounce</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='g'>Gram</option>\n                                            <option value='kg'>Kilogram</option>\n                                            <option value='mg'>Miligram</option>\n                                            <option value='lb'>Pound</option>\n                                            <option value='t'>Ton</option>\n                                            <option value='mt'>Metric Ton</option>\n                                            <option value='oz'>Ounce</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Volume */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='ml'>Militer</option>\n                                            <option value='l'>Liter</option>\n                                            <option value='m3'>Cubic Meter</option>\n                                            <option value='km3'>Cubic Kilometer</option>\n                                            <option value='cm3'>Cubic Centimeter</option>\n                                            <option value='mm3'>Cubic Milimeter</option>\n                                            <option value='gal'>US Gallon</option>\n                                            <option value='qt'>US Quart</option>\n                                            <option value='cup'>US Cup</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='ml'>Militer</option>\n                                            <option value='l'>Liter</option>\n                                            <option value='m3'>Cubic Meter</option>\n                                            <option value='km3'>Cubic Kilometer</option>\n                                            <option value='cm3'>Cubic Centimeter</option>\n                                            <option value='mm3'>Cubic Milimeter</option>\n                                            <option value='gal'>US Gallon</option>\n                                            <option value='qt'>US Quart</option>\n                                            <option value='cup'>US Cup</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Area */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m2'>Square Meter</option>\n                                            <option value='km2'>Square Kilometer</option>\n                                            <option value='cm2'>Square Centimeter</option>\n                                            <option value='mm2'>Square Millimeter</option>\n                                            <option value='in2'>Square Inch</option>\n                                            <option value='mi2'>Square Mile</option>\n                                            <option value='yd2'>Square Yard</option>\n                                            <option value='ha'>Hectare</option>\n                                            <option value='ac'>Acres</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m2'>Square Meter</option>\n                                            <option value='km2'>Square Kilometer</option>\n                                            <option value='cm2'>Square Centimeter</option>\n                                            <option value='mm2'>Square Millimeter</option>\n                                            <option value='in2'>Square Inch</option>\n                                            <option value='mi2'>Square Mile</option>\n                                            <option value='yd2'>Square Yard</option>\n                                            <option value='ha'>Hectare</option>\n                                            <option value='ac'>Acres</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Data */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='b'>Byte</option>\n                                            <option value='Kb'>Kilobyte</option>\n                                            <option value='Mb'>Megabyte</option>\n                                            <option value='Gb'>Gigabyte</option>\n                                            <option value='Tb'>Terabyte</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='b'>Byte</option>\n                                            <option value='Kb'>Kilobyte</option>\n                                            <option value='Mb'>Megabyte</option>\n                                            <option value='Gb'>Gigabyte</option>\n                                            <option value='Tb'>Terabyte</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Time */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='s'>Second</option>\n                                            <option value='ms'>Millisecond</option>\n                                            <option value='min'>Minute</option>\n                                            <option value='h'>Hour</option>\n                                            <option value='d'>Day</option>\n                                            <option value='week'>Week</option>\n                                            <option value='month'>Month</option>\n                                            <option value='year'>Year</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='s'>Second</option>\n                                            <option value='ms'>Millisecond</option>\n                                            <option value='min'>Minute</option>\n                                            <option value='h'>Hour</option>\n                                            <option value='d'>Day</option>\n                                            <option value='week'>Week</option>\n                                            <option value='month'>Month</option>\n                                            <option value='year'>Year</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Temperature */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='C'>Celsius</option>\n                                            <option value='K'>Kelvin</option>\n                                            <option value='F'>Fahrenheit</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='C'>Celsius</option>\n                                            <option value='K'>Kelvin</option>\n                                            <option value='F'>Fahrenheit</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n                </div>\n            </Tabs>\n            <div>\n                <Row className='mb-4'>\n                    <Col style={{ textAlign: 'center' }}>\n                        <Button className='submit-button' variant='white' onClick={handleSubmit}>\n                            Submit\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        </div>\n    );\n};\n\nexport default UnitConverter;\n","import React from 'react';\nimport Header from './Header';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport BasicCal from './basicCal/component/App';\nimport SignIn from './SignIn';\nimport SignUp from './SignUp';\nimport ConfirmEmail from './ConfirmEmail';\nimport ConfirmPassword from './ConfirmPassword';\nimport Randomizer from './randomizer/App';\nimport UrlService from \"./services/UrlService\";\nimport axios from 'axios';\nimport InformationRandomizer from './randomizer/InformationRandomizer';\nimport ScientificCalculator from './ScientificCalculator';\nimport UnitConverter from './UnitConverter';\n\nexport default class Main extends React.Component {\n    state = { ready: false };\n\n    componentDidMount = () => {\n        axios.get(UrlService.currentUserProfileUrl()).then(\n            res => {\n                this.setUser(res.data)\n            }\n        ).catch(\n            err => {\n                console.log(err)\n            }\n        ).finally(() => {\n            this.setState({ ready: true })\n        })\n    }\n\n    setUser = user => {\n        this.setState({\n            user: user\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Header user={this.state.user} setUser={this.setUser} />\n                <Switch>\n                    <Redirect exact from=\"/\" to=\"/BasicCalculator\" />\n                    <Route path={'/BasicCalculator'} component={BasicCal} />\n                    {this.state.ready && <Route path={'/signin'} component={() => <SignIn setUser={this.setUser} />} />}\n                    <Route path={'/signup'} component={() => <SignUp setUser={this.setUser} />} />\n                    <Route path={'/password/forgot'} component={ConfirmEmail} />\n                    <Route path={'/password/reset/:token'} component={ConfirmPassword} />\n                    <Route path={'/randomizer-information'} component={InformationRandomizer} />\n                    {this.state.ready && <Route path={'/randomizer'} component={() => <Randomizer user={this.state.user} setUser={this.setUser} />} />}\n                    <Route path='/ScientificCalculator' component={ScientificCalculator} />\n                    <Route path='/UnitConverter' component={UnitConverter} />\n                </Switch>\n            </div>\n        );\n    }\n};\n\n","import './App.css';\nimport Main from './components/Main';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <Router >\n            <div className='App'>\n                <Main />\n            </div>\n        </Router>\n    );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from 'axios'\n\naxios.defaults.headers.common['Authorization'] = 'Bearer ' + sessionStorage.getItem('access_token')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { Component } from 'react';\nimport './ScientificCalculator.css';\nimport PointTarget from 'react-point';\n\nclass AutoScalingText extends Component {\n    state = {\n        scale: 1,\n    };\n\n    componentDidUpdate() {\n        const { scale } = this.state;\n        const node = this.node;\n        const parentNode = node.parentNode;\n        const availableWidth = parentNode.offsetWidth;\n        const actualWidth = node.offsetWidth;\n        const actualScale = availableWidth / actualWidth;\n\n        if (scale === actualScale) return;\n\n        if (actualScale < 1) {\n            this.setState({ scale: actualScale });\n        } else if (scale < 1) {\n            this.setState({ scale: 1 });\n        }\n    }\n\n    render() {\n        const { scale } = this.state;\n\n        return (\n            <div\n                className='auto-scaling-text'\n                style={{ transform: `scale(${scale},${scale})` }}\n                ref={(node) => (this.node = node)}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nclass CalculatorDisplay extends Component {\n    render() {\n        const { value, ...props } = this.props;\n        const language = navigator.language || 'en-US';\n        const escapedKeys = [' e ', 'E', '*', '(', ')', 'r', 'o'];\n        let isNumeric = true;\n\n        escapedKeys.forEach((key) => {\n            if (value.includes(key)) isNumeric = false;\n        });\n\n        const parsedValue = isNumeric ? parseFloat(value) : value;\n\n        let formattedValue = parsedValue.toLocaleString(language, {\n            useGrouping: true,\n            maximumFractionDigits: 10,\n        });\n\n        const match = value.match(/\\.\\d*?(0*)$/);\n\n        if (match) formattedValue += /[1-9]/.test(match[0]) ? match[1] : match[0];\n\n        return (\n            <div {...props}>\n                <AutoScalingText>{formattedValue}</AutoScalingText>\n            </div>\n        );\n    }\n}\n\nclass CalculatorKey extends Component {\n    render() {\n        const { onPress, className, ...props } = this.props;\n\n        return (\n            <PointTarget onPoint={onPress}>\n                <button className={`calculator-key ${className}`} {...props} />\n            </PointTarget>\n        );\n    }\n}\n\nconst CalculatorOperations = {\n    '/': (prevValue, nextValue) => (nextValue === 0 ? 'error' : prevValue / nextValue),\n    '*': (prevValue, nextValue) => prevValue * nextValue,\n    '+': (prevValue, nextValue) => prevValue + nextValue,\n    '-': (prevValue, nextValue) => prevValue - nextValue,\n    '=': (prevValue, nextValue) => nextValue,\n    nthRoot: (prevValue, nextValue) => Math.pow(nextValue, 1 / prevValue),\n    xPowY: (prevValue, nextValue) => Math.pow(prevValue, nextValue),\n    yPowX: (prevValue, nextValue) => Math.pow(nextValue, prevValue),\n    logY: (prevValue, nextValue) => Math.log(nextValue) / Math.log(prevValue),\n};\n\nclass ScientificCalculator extends Component {\n    state = {\n        value: null,\n        displayValue: '0',\n        operator: null,\n        waitingForOperand: false,\n        isDot: false,\n        done: false,\n        shift: false,\n        degree: false,\n        ee: false,\n        isMemoryActive: false,\n        isBracketsActive: false,\n        isLeftBracket: false,\n        isRightBracket: false,\n        isDigit: false,\n        isOperator: false,\n        countBracket: 0,\n        checkLeftBracket: false,\n        memory: {\n            memory_plus: 0,\n            memory_minus: 0,\n            memory_recall: null,\n        },\n    };\n\n    degreeClick = () => {\n        this.setState((state) => {\n            return {\n                degree: !state.degree,\n            };\n        });\n    };\n\n    shiftClick = () => {\n        this.setState((state) => {\n            return {\n                shift: !state.shift,\n            };\n        });\n    };\n\n    clearAll() {\n        this.setState({\n            value: null,\n            displayValue: '0',\n            operator: null,\n            waitingForOperand: false,\n            isDot: false,\n            done: false,\n            ee: false,\n            isMemoryActive: false,\n            isBracketsActive: false,\n            isRightBracket: false,\n            isLeftBracket: false,\n            isDigit: false,\n            isOperator: false,\n            countBracket: 0,\n            checkLeftBracket: false,\n        });\n    }\n\n    clearDisplay() {\n        this.setState({\n            displayValue: '0',\n        });\n    }\n\n    clearLastChar() {\n        const { displayValue } = this.state;\n\n        this.setState({\n            displayValue: displayValue.substring(0, displayValue.length - 1) || '0',\n        });\n    }\n\n    toggleSign() {\n        const { displayValue } = this.state;\n        const newValue = parseFloat(displayValue) * -1;\n\n        this.setState({\n            displayValue: String(newValue),\n        });\n    }\n\n    inputPercent() {\n        const { displayValue } = this.state;\n        const currentValue = parseFloat(displayValue);\n\n        if (currentValue === 0) return;\n\n        const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '');\n        const newValue = parseFloat(displayValue) / 100;\n\n        this.setState({\n            displayValue: String(newValue.toFixed(fixedDigits.length + 2)),\n            done: true,\n        });\n    }\n\n    inputDot() {\n        const {\n            displayValue,\n            waitingForOperand,\n            isDot,\n            isMemoryActive,\n            isBracketsActive,\n            countBracket,\n            isOperator,\n        } = this.state;\n\n        if (waitingForOperand === true) {\n            if (isBracketsActive === true && countBracket === 0) {\n                this.setState({\n                    displayValue: displayValue + '*0.',\n                    waitingForOperand: false,\n                });\n            } else if (isBracketsActive === true && isOperator === true) {\n                this.setState({\n                    displayValue: displayValue + '0.',\n                    waitingForOperand: false,\n                });\n            } else {\n                this.setState({ displayValue: '0.', waitingForOperand: false });\n            }\n        } else if (isDot === true) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        } else if (isMemoryActive === true) {\n            this.setState({\n                displayValue: '0.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        } else if (!/\\./.test(displayValue)) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n                isDot: true,\n            });\n        }\n    }\n\n    inputDigit(digit) {\n        const { displayValue, waitingForOperand, isDot, done } = this.state;\n\n        if (waitingForOperand) {\n            this.setState({\n                displayValue: String(digit),\n                waitingForOperand: false,\n                isDigit: true,\n            });\n        } else {\n            const hasDot = displayValue.includes('.');\n            const integer = displayValue.split('.')[0];\n\n            if (!hasDot && integer.length >= 10) return;\n\n            if (done === true) {\n                this.clearAll();\n                this.setState({\n                    displayValue: String(digit),\n                    isDigit: true,\n                    isOperator: false,\n                });\n            } else if (isDot === true) {\n                this.setState({ displayValue: displayValue + digit });\n            } else {\n                this.setState({\n                    displayValue: displayValue === '0' ? String(digit) : displayValue + digit,\n                    isDigit: true,\n                    isOperator: true,\n                    checkLeftBracket: false,\n                });\n            }\n        }\n    }\n\n    performOperation(nextOperator) {\n        const {\n            value,\n            displayValue,\n            operator,\n            waitingForOperand,\n            isMemoryActive,\n            isBracketsActive,\n            isDigit,\n            isOperator,\n            ee,\n            countBracket,\n        } = this.state;\n\n        if (nextOperator === '=' && countBracket !== 0) {\n            return this.setState({\n                displayValue: 'error',\n                isBracketsActive: false,\n                done: true,\n            });\n        }\n\n        if (isOperator === false) {\n            return this.setState({ displayValue });\n        }\n\n        if (isBracketsActive === true && nextOperator === '=') {\n            return this.setState({\n                displayValue: String(eval(displayValue)),\n                isBracketsActive: false,\n                done: true,\n            });\n        } else if (isBracketsActive === true) {\n            if (isDigit) {\n                this.setState({\n                    displayValue: displayValue + nextOperator,\n                    isOperator: false,\n                    isDigit: false,\n                    checkLeftBracket: false,\n                });\n            }\n        } else {\n            const inputValue = parseFloat(displayValue);\n\n            if (ee === true) {\n                const currentValue = displayValue.replace(/\\s/g, '');\n                return this.setState({\n                    displayValue: parseFloat(currentValue).toPrecision(),\n                    done: true,\n                    ee: false,\n                });\n            }\n\n            if (value == null) {\n                this.setState({\n                    value: inputValue,\n                });\n            } else if (\n                (operator && waitingForOperand === false) ||\n                (operator && isMemoryActive === true)\n            ) {\n                const currentValue = parseFloat(value) || 0;\n                const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n                this.setState({\n                    value: newValue,\n                    displayValue: String(newValue),\n                });\n            }\n\n            this.setState({\n                waitingForOperand: true,\n                operator: nextOperator,\n            });\n        }\n    }\n\n    keyDown = (event) => {\n        let { key } = event;\n\n        if (key === 'Enter') key = '=';\n\n        if (/\\d/.test(key)) {\n            event.preventDefault();\n            this.inputDigit(parseInt(key, 10));\n        } else if (key in CalculatorOperations) {\n            event.preventDefault();\n            this.performOperation(key);\n        } else if (key === '.') {\n            event.preventDefault();\n            this.inputDot();\n        } else if (key === '%') {\n            event.preventDefault();\n            this.inputPercent();\n        } else if (key === 'Backspace') {\n            event.preventDefault();\n            this.clearLastChar();\n        } else if (key === 'Clear') {\n            event.preventDefault();\n\n            if (this.state.displayValue !== '0') {\n                this.clearDisplay();\n            } else {\n                this.clearAll();\n            }\n        }\n    };\n\n    memoryClear() {\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: 0,\n                memory_minus: 0,\n                memory_recall: null,\n            },\n            isMemoryActive: false,\n        }));\n    }\n\n    memoryPlus() {\n        let temp = parseFloat(this.state.displayValue) + this.state.memory.memory_plus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: temp,\n            },\n            isMemoryActive: true,\n        }));\n    }\n\n    memoryMinus() {\n        let temp = parseInt(this.state.displayValue) + this.state.memory.memory_minus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_minus: temp,\n            },\n            isMemoryActive: true,\n        }));\n    }\n\n    memoryRecall() {\n        const { isMemoryActive } = this.state;\n\n        let temp = (this.state.memory.memory_plus - this.state.memory.memory_minus).toString();\n\n        if (isMemoryActive) {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: true,\n            });\n        } else {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: false,\n            });\n        }\n    }\n\n    power2() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 2)), done: true });\n    }\n\n    power3() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 3)), done: true });\n    }\n\n    tenPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(10, parseFloat(displayValue))), done: true });\n    }\n\n    twoPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(2, parseFloat(displayValue))), done: true });\n    }\n\n    rand() {\n        this.setState({ displayValue: String(Math.random()) });\n    }\n\n    sin() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.sin(displayValue)), done: true });\n        } else {\n            const result = String(Math.sin((parseFloat(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cos() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.cos(displayValue)), done: true });\n        } else {\n            const result = String(Math.cos((parseInt(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tan() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.tan(displayValue)), done: true });\n        } else {\n            if (displayValue === '90' || displayValue === '270') {\n                this.setState({ displayValue: 'Not a number' });\n            } else {\n                const result = String(Math.tan((parseFloat(displayValue) * Math.PI) / 180));\n                this.setState({ displayValue: result, done: true });\n            }\n        }\n    }\n\n    sinh() {\n        const { displayValue } = this.state;\n        const result = String(Math.sinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    cosh() {\n        const { displayValue } = this.state;\n        const result = String(Math.cosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanh() {\n        const { displayValue } = this.state;\n        const result = String(Math.tanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    sinInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.asin(displayValue)), done: true });\n        } else {\n            const result = String((Math.asin(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cosInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.acos(displayValue)), done: true });\n        } else {\n            const result = String((Math.acos(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tanInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.atan(displayValue)), done: true });\n        } else {\n            const result = String((Math.atan(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    sinhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.asinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    coshInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.acosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.atanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    squareRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.sqrt(parseFloat(displayValue))), done: true });\n    }\n\n    cubeRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.cbrt(parseFloat(displayValue))), done: true });\n    }\n\n    factorial() {\n        const { displayValue } = this.state;\n\n        if (displayValue.indexOf('.') !== -1) {\n            return this.setState({ displayValue: 'NaN' });\n        }\n\n        if (displayValue === '1' || displayValue === '-1') {\n            return this.setState({ displayValue });\n        } else if (parseInt(displayValue) > 1) {\n            var result = 1;\n\n            for (var i = 1; i <= parseInt(displayValue); ++i) {\n                result *= i;\n            }\n\n            return this.setState({ displayValue: String(result), done: true });\n        } else if (parseInt(displayValue) < -1) {\n            var resultNegative = 1;\n\n            for (var j = -1; j >= parseInt(displayValue); j--) {\n                resultNegative *= j;\n            }\n\n            return this.setState({ displayValue: String(resultNegative), done: true });\n        }\n    }\n\n    log10() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log10(parseFloat(displayValue))), done: true });\n    }\n\n    log2() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log2(parseFloat(displayValue))), done: true });\n    }\n\n    log() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log(parseFloat(displayValue))), done: true });\n    }\n\n    multiplicativeInverse() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: 'error', done: true });\n        }\n\n        const result = String(1 / displayValue);\n        this.setState({ displayValue: result, done: true });\n    }\n\n    exponential() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: '1' });\n        }\n\n        const result = String(Math.exp(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n    }\n\n    ee() {\n        const { displayValue, done, ee } = this.state;\n\n        if (done === false) {\n            if (ee === true) {\n                this.setState({ displayValue });\n            } else {\n                this.setState({ displayValue: displayValue + ' e ', ee: true });\n            }\n        }\n    }\n\n    leftBracket() {\n        const { displayValue, isOperator, countBracket, checkLeftBracket } = this.state;\n\n        if (displayValue === '0') {\n            this.setState({\n                displayValue: '(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        } else if (isOperator === false || checkLeftBracket === true) {\n            this.setState({\n                displayValue: displayValue + '(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        } else {\n            this.setState({\n                displayValue: displayValue + '*(',\n                isBracketsActive: true,\n                isLeftBracket: true,\n                isOperator: true,\n                countBracket: countBracket + 1,\n                checkLeftBracket: true,\n            });\n        }\n    }\n\n    rightBracket() {\n        const { displayValue, isLeftBracket, isDigit, countBracket } = this.state;\n\n        if (isLeftBracket && isDigit) {\n            this.setState({\n                displayValue: displayValue + ')',\n                countBracket: countBracket - 1,\n            });\n        }\n    }\n\n    render() {\n        const { displayValue } = this.state;\n        const clearDisplay = displayValue !== '0';\n        const clearText = clearDisplay ? 'C' : 'AC';\n\n        return (\n            <div id='scientific-calculator'>\n                <div className='calculator-body'>\n                    <div class='resultContainer'>\n                        <div class='result'>\n                            <p>\n                                <CalculatorDisplay value={displayValue} />\n                            </p>\n                        </div>\n                    </div>\n                    <div className='button'>\n                        <div className='test'>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.leftBracket()}\n                            >\n                                (\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rightBracket()}\n                            >\n                                )\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryClear()}\n                            >\n                                mc\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryPlus()}\n                            >\n                                m+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryMinus()}\n                            >\n                                m-\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryRecall()}\n                            >\n                                mr\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='clear'\n                                style={{ backgroundColor: '#BB4444', color: '#F0F5F9' }}\n                                onPress={() =>\n                                    clearDisplay ? this.clearDisplay() : this.clearAll()\n                                }\n                            >\n                                {clearText}\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.toggleSign()}\n                            >\n                                -/+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputPercent()}\n                            >\n                                %\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('/')}\n                            >\n                                ÷\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    2\n                                    <sup>\n                                        <small>nd</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    1\n                                    <sup>\n                                        <small>st</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power2()}\n                            >\n                                x\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power3()}\n                            >\n                                x\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('xPowY')}\n                            >\n                                x\n                                <sup>\n                                    <small>y</small>\n                                </sup>\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.exponential()}\n                                >\n                                    e\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('yPowX')}\n                                >\n                                    y\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tenPowerX()}\n                                >\n                                    10\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.twoPowerX()}\n                                >\n                                    2\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(7)}\n                            >\n                                7\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(8)}\n                            >\n                                8\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(9)}\n                            >\n                                9\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('*')}\n                            >\n                                ×\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.multiplicativeInverse()}\n                            >\n                                1/x\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.squareRoot()}\n                            >\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.cubeRoot()}\n                            >\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('nthRoot')}\n                            >\n                                <sup>\n                                    <small>x</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log()}\n                                >\n                                    ln\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.performOperation('logY')}\n                                >\n                                    log\n                                    <sub>\n                                        <small>y</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log10()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>10</small>\n                                    </sub>\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log2()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>2</small>\n                                    </sub>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(4)}\n                            >\n                                4\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(5)}\n                            >\n                                5\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(6)}\n                            >\n                                6\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('-')}\n                            >\n                                −\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.factorial()}\n                            >\n                                x!\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sin()}\n                                >\n                                    sin\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinInverse()}\n                                >\n                                    sin\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cos()}\n                                >\n                                    cos\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosInverse()}\n                                >\n                                    cos\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tan()}\n                                >\n                                    tan\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tan\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.exp(1))}\n                            >\n                                e\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.ee()}\n                            >\n                                EE\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(1)}\n                            >\n                                1\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(2)}\n                            >\n                                2\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(3)}\n                            >\n                                3\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('+')}\n                            >\n                                +\n                            </CalculatorKey>\n                            {!this.state.degree ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Rad\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Deg\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinh()}\n                                >\n                                    sinh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinhInverse()}\n                                >\n                                    sinh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosh()}\n                                >\n                                    cosh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.coshInverse()}\n                                >\n                                    cosh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanh()}\n                                >\n                                    tanh\n                                </CalculatorKey>\n                            ) : (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanhInverse()}\n                                >\n                                    tanh\n                                    <sup>\n                                        <small>-1</small>\n                                    </sup>\n                                </CalculatorKey>\n                            )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.PI)}\n                            >\n                                π\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rand()}\n                            >\n                                Rand\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='zero'\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(0)}\n                            >\n                                0\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDot()}\n                            >\n                                .\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#c9d6df', color: '#52616b' }}\n                                onPress={() => this.performOperation('=')}\n                            >\n                                =\n                            </CalculatorKey>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ScientificCalculator;\n"],"sourceRoot":""}