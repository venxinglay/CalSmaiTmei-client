{"version":3,"sources":["components/SideMenu.js","components/Header.js","components/basicCal/component/Display.js","components/basicCal/component/Button.js","components/basicCal/component/ButtonPanel.js","components/basicCal/logic/operate.js","components/basicCal/logic/calculate.js","components/basicCal/logic/isNumber.js","components/basicCal/component/App.js","components/services/UrlService.js","components/SignIn.js","components/SignUp.js","components/ConfirmEmail.js","components/ConfirmPassword.js","components/randomizer/Nav.js","components/randomizer/Body.js","components/randomizer/App.js","components/randomizer/InformationRandomizer.js","components/UnitConverter.js","components/Main.js","App.js","reportWebVitals.js","index.js","components/ScientificCalculator.js"],"names":["SideMenu","title","path","cName","Header","props","shows","useState","sideMenu","setSideMenu","history","useHistory","showSideMenu","user","className","onClick","localStorage","clear","setUser","push","to","id","Provider","value","color","class","map","item","index","icon","Display","this","React","Component","Button","handleClick","clickHandler","name","orange","wide","bbb","join","trim","ButtonPanel","buttonName","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","Error","calculate","obj","total","next","test","length","parseFloat","includes","memory","BasicCal","state","setState","handleKeyDown","event","key","preventDefault","clearLastChar","substring","document","addEventListener","removeEventListener","apiDomain","UrlService","SignIn","useForm","criteriaMode","register","handleSubmit","errors","data","a","axios","post","loginUrl","then","res","setItem","access_token","catch","err","console","log","alert","response","message","Container","Row","Form","fluid","onSubmit","Col","lg","md","sm","xs","Group","controlId","Label","Control","autoComplete","ref","required","pattern","type","placeholder","render","messages","Object","entries","style","Text","textAlign","fontSize","marginLeft","textDecoration","variant","SignUp","watch","password","useRef","current","registerUrl","email","minLength","maxLength","validate","password_confirmation","fontWeight","ConfirmEmail","forgotUrl","ConfirmPassword","defaultValues","token","match","params","resetPasswordUrl","password_repeat","Nav","active","setActive","onSelectRandomizer","handleSelectRandomizer","Body","currentTextareaValue","qty","createRef","bind","handleChange","b","split","filter","teamGenerator","onGetQty","onGetData","getType","target","teamGen","picker","customList","getResult","as","rows","onChange","customListItem","randomizer","handleGetQty","handleGetData","items","handleRandomizer","activeRandomizer","setResult","result","handleSave","tGenerator","SaveRandomizer","handleType","handleSelectConverter","con","size","startIcon","margin","outline","InteractiveList","setData","useEffect","get","SaveRandomizerList","Grid","container","justify","Typography","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","component","scope","ExportUrl","responseType","fileURL","window","URL","createObjectURL","Blob","fileLink","createElement","href","setAttribute","body","appendChild","click","cn","args","Boolean","Tab","children","useTabState","isActive","UnitConverter","setIndex","setValue","unitFrom","setUnitFrom","unitTo","setUnitTo","e","multiple","converted","Main","ready","componentDidMount","currentUserProfileUrl","finally","exact","from","InformationRandomizer","ScientificCalculator","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","headers","common","getItem","ReactDOM","StrictMode","getElementById","AutoScalingText","scale","node","actualScale","parentNode","offsetWidth","transform","CalculatorDisplay","language","navigator","isNumeric","forEach","formattedValue","toLocaleString","useGrouping","maximumFractionDigits","endsWith","CalculatorKey","onPress","onPoint","CalculatorOperations","prevValue","nextValue","nthRoot","Math","pow","xPowY","yPowX","logY","displayValue","operator","waitingForOperand","done","shift","degree","ee","isMemoryActive","isBracketsActive","isLeftBracket","isRightBracket","isDigit","isOperator","countBracket","checkLeftBracket","memory_plus","memory_minus","memory_recall","degreeClick","shiftClick","keyDown","inputDigit","parseInt","performOperation","inputDot","inputPercent","clearDisplay","clearAll","newValue","String","fixedDigits","replace","toFixed","digit","hasDot","integer","nextOperator","isbracketsActive","eval","inputValue","currentValue","toPrecision","prevState","temp","random","sin","PI","cos","tan","sinh","cosh","tanh","asin","acos","atan","asinh","acosh","atanh","sqrt","cbrt","indexOf","i","resultNegative","j","log10","log2","exp","clearText","backgroundColor","leftBracket","rightBracket","memoryClear","memoryPlus","memoryMinus","memoryRecall","toggleSign","power2","power3","exponential","twoPowerX","tenPowerX","multiplicativeInverse","squareRoot","cubeRoot","factorial","sinInverse","cosInverse","tanhInverse","sinhInverse","coshInverse","rand"],"mappings":"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","file":"static/js/main.75e00f8e.chunk.js","sourcesContent":["export const SideMenu = [\n  {\n    title: 'CAL SMEi-TMEi',\n    path: '/BasicCalculator',\n    cName: 'nav-text-brand'\n  },\n  {\n    title: 'Basic Calculator',\n    path: '/BasicCalculator',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Scientific Calculator',\n    path: '/ScientificCalculator',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Unit Converter',\n    path: '/UnitConverter',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Randomizer',\n    path: '/randomizer',\n    cName: 'nav-text'\n  },\n  {\n    title: 'Randomizer Information',\n    path: '/randomizer/information',\n    cName: 'nav-text'\n  },\n];","import React, { useState } from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport { SideMenu } from '../components/SideMenu.js';\nimport './Authentication.css';\nimport { IconContext } from 'react-icons';\nimport Avatar from '@material-ui/core/Avatar';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nfunction Header(props) {\n    const [sideMenu, setSideMenu] = useState(false);\n    const history = useHistory();\n    const showSideMenu = () => setSideMenu(!sideMenu);\n\n    const handleLogout = () => {\n        localStorage.clear();\n        props.setUser(null);\n        history.push('/signIn');\n    };\n    let shows;\n    if (props.user) {\n        shows = (\n            <div className='login-logout'>\n                <Link onClick={handleLogout} className='login'>\n                    Log out\n                </Link>\n            </div>\n        );\n    } else {\n        shows = (\n            <div className='login-logout'>\n                <Link to='/SignIn' className='login'>\n                    Log In\n                </Link>\n            </div>\n        );\n    }\n    return (\n        <div id='header'>\n            <IconContext.Provider value={{ color: '#52616b' }}>\n                <div className='navbar'>\n                    <Link to='#' className='menu-bars'>\n                        <FaIcons.FaBars onClick={showSideMenu} />\n                    </Link>\n                    <span class='navbar-brand h1'>CAL SMEi-TMEi</span>\n                    {shows}\n                </div>\n\n                <nav className={sideMenu ? 'nav-menu active' : 'nav-menu'}>\n                    <ul className='nav-menu-items' onClick={showSideMenu}>\n                        <li className='navbar-toggle'>\n                            <Link to='#' className='menu-close'>\n                                <AiIcons.AiOutlineClose />\n                            </Link>\n                        </li>\n                        {SideMenu.map((item, index) => {\n                            return (\n                                <li key={index} className={item.cName}>\n                                    <Link to={item.path}>\n                                        {item.icon}\n                                        <span>{item.title}</span>\n                                    </Link>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </nav>\n            </IconContext.Provider>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nexport default class Display extends React.Component {\n    static propTypes = {\n        value: PropTypes.string,\n    };\n\n\n    render() {\n        return (\n            <div className=\"component-display\">\n                <div className=\"result\">{this.props.value}</div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nexport default class Button extends React.Component {\n\n  static propTypes = {\n    name: PropTypes.string,\n    orange: PropTypes.bool,\n    bbb: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func,\n  };\n\n  handleClick = () => {\n    this.props.clickHandler(this.props.name);\n  };\n\n  render() {\n    const className = [\n      \"component-button\",\n      this.props.orange ? \"orange\" : \"\",\n      this.props.wide ? \"wide\" : \"\",\n      this.props.bbb ? \"bbb\" : \"\",\n    ];\n\n    return (\n\n      <div className={className.join(\" \").trim()}>\n        <button onClick={this.handleClick}>{this.props.name}</button>\n      </div>\n    );\n  }\n}\n","import Button from \"./Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nexport default class ButtonPanel extends React.Component {\n  static propTypes = {\n    clickHandler: PropTypes.func,\n  };\n\n  handleClick = buttonName => {\n    this.props.clickHandler(buttonName);\n  };\n\n\n  render() {\n    return (\n      <div className=\"component-button-panel\">\n        <div>\n          <Button name=\"mc\" clickHandler={this.handleClick} />\n          <Button name=\"m+\" clickHandler={this.handleClick} />\n          <Button name=\"m-\" clickHandler={this.handleClick} />\n          <Button name=\"mr\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"AC\" clickHandler={this.handleClick} orange />\n          <Button name=\"-/+\" clickHandler={this.handleClick} />\n          <Button name=\"%\" clickHandler={this.handleClick} />\n          <Button name=\"÷\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"7\" clickHandler={this.handleClick} />\n          <Button name=\"8\" clickHandler={this.handleClick} />\n          <Button name=\"9\" clickHandler={this.handleClick} />\n          <Button name=\"x\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"4\" clickHandler={this.handleClick} />\n          <Button name=\"5\" clickHandler={this.handleClick} />\n          <Button name=\"6\" clickHandler={this.handleClick} />\n          <Button name=\"-\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"1\" clickHandler={this.handleClick} />\n          <Button name=\"2\" clickHandler={this.handleClick} />\n          <Button name=\"3\" clickHandler={this.handleClick} />\n          <Button name=\"+\" clickHandler={this.handleClick} />\n        </div>\n        <div>\n          <Button name=\"0\" clickHandler={this.handleClick} wide />\n          <Button name=\".\" clickHandler={this.handleClick} />\n          <Button name=\"=\" clickHandler={this.handleClick} bbb />\n        </div>\n      </div>\n    );\n  }\n}\n","import Big from \"big.js\";\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || \"0\");\n  const two = Big(numberTwo || (operation === \"÷\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\n  let temp = 0;\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"%\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"÷\") {\n    if (two == \"0\") {\n      \n      return \"error\";\n    } else {\n      temp = one.div(two);\n      return temp.toString();\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If the length is over 9 prevent input from the user \n\n    if (obj.next?.length > 9)\n      return;\n\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.total != 0) {\n      const result = parseFloat(obj.total) / 100;\n      return {\n        total: result,\n        next: parseFloat(obj.next) / 100,\n        operation: null\n\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n\n  if (buttonName === 'mc') {\n    return {\n      memory: null\n    };\n  }\n  if (buttonName === 'mr') {\n\n    return {\n\n      // total: obj.memory\n      next: obj.memory\n    };\n  }\n  if (buttonName === 'm-') {\n    if (obj.next === null) {\n      obj.next = obj.total\n    }\n    return {\n      memory: \"-\" + obj.next\n    };\n  }\n  if (buttonName === 'm+') {\n    if (obj.next === null) {\n      obj.next = obj.total\n    }\n    return {\n      memory: obj.next\n    };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"-/+\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n\n\n\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","export default function isNumber(item) {\n\n  return /[0-9]+/.test(item);\n}\n","import React from 'react';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\nimport calculate from '../logic/calculate';\nimport './App.css';\n\nexport default class BasicCal extends React.Component {\n    state = {\n        total: null,\n        next: null,\n        operation: null,\n        memory: null,\n    };\n\n    handleClick = (buttonName) => {\n        this.setState(calculate(this.state, buttonName));\n    };\n\n    clearLastChar() {\n        this.setState({\n            next: this.state.next.substring(0, this.state.next.length - 1) || '0',\n        });\n    }\n\n    handleKeyDown = (event) => {\n        let { key } = event;\n\n        if (key === 'Enter') key = '=';\n\n        if (/\\d/.test(key)) {\n            event.preventDefault();\n            this.setState(calculate(this.state, key));\n        } else if (key === '*' || key === '-' || key === '+' || key === '/' || key === '=') {\n            event.preventDefault();\n            if (key === '*') {\n                key = 'x';\n            }\n            this.setState(calculate(this.state, key));\n        } else if (key === '.') {\n            event.preventDefault();\n            this.setState(calculate(this.state, '.'));\n        } else if (key === '%') {\n            event.preventDefault();\n            this.setState(calculate(this.state, '%'));\n        } else if (key === 'Backspace') {\n            event.preventDefault();\n            this.clearLastChar();\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    render() {\n        return (\n            <div id='basicCal'>\n                <div  className='component-app'>\n                    <Display value={this.state.next || this.state.total || '0'} />\n                    <ButtonPanel clickHandler={this.handleClick} />\n                </div>\n            </div>\n        );\n    }\n}\n","\n// if (process.env.NODE_ENV === \"production\") {\n//   apiDomain = \"https://calsmaitmei-server.venxing.me/api/\";\n// } else {\n//   apiDomain = \"http://calsmaitmei-app.test/api/\";\n// }\n\nlet apiDomain = \"https://calsmaitmei-server.venxing.me/api/\";\nclass UrlService {\n  static loginUrl() {\n    return apiDomain + \"login\";\n  }\n  static currentUserProfileUrl() {\n    return apiDomain + \"user\";\n  }\n  static registerUrl() {\n    return apiDomain + \"register\";\n  }\n  static forgotUrl() {\n    return apiDomain + 'password/email';\n  }\n  static resetPasswordUrl() {\n    return apiDomain + 'password/reset';\n  }\n  static handleRandomizer() {\n    return apiDomain + 'randomizer/generate';\n  }\n  static SaveRandomizer() {\n    return apiDomain + 'randomizer';\n  }\n  static SaveRandomizerList() {\n    return apiDomain + 'randomizer';\n  }\n  static DeleteRandomizerList(id) {\n    return apiDomain + 'randomizer/' + id;\n  }\n  static ExportUrl() {\n    return apiDomain + 'export';\n  }\n\n}\n\nexport default UrlService;","import '../App.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport UrlService from './services/UrlService'\nimport axios from \"axios\"\n\n\n\n\n\n\n\nconst SignIn = (props) => {\n    const history = useHistory();\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    //Handle Login\n    async function onSubmit(data) {\n        axios.post(UrlService.loginUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    localStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                console.log(err)\n                alert(err.response.data.message)\n            }\n        )\n    }\n\n    return (\n        <>\n            <Container id='sign-in'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign In</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Let's Get Started</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(([type, message]) => (\n                                                    <p style={{ color: 'red' }} key={type}>\n                                                        {message}\n                                                    </p>\n                                                ))\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicPassword'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        className='from-control'\n                                        type='password'\n                                        placeholder='Enter Password'\n                                        name='password'\n                                        ref={register({\n                                            required: 'This is required.'\n                                        })}\n                                        required\n                                    />\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Link\n                                to='/password/forgot'\n                                style={{\n                                    fontSize: '800',\n                                }}>\n                                Forgotten Password?\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4 mt-3'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Don't have an account yet?\n                            <Link\n                                to='/signup'\n                                style={{\n                                    fontSize: '800',\n                                    color: '#52616b',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign Up\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign In\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignIn;","import React, { useRef } from 'react';\n\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport UrlService from './services/UrlService';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nconst SignUp = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const history = useHistory();\n    const onSubmit = (data) => {\n\n        axios.post(UrlService.registerUrl(), data).then(\n            res => {\n                if (res.data.user) {\n                    localStorage.setItem('access_token', res.data.access_token);\n                    props.setUser(res.data.user);\n                    history.push('/randomizer')\n                }\n\n            }\n        ).catch(\n            err => {\n                console.log(err)\n            }\n            \n            // err => {\n            //     alert(err.response.data.errors.email.join(', '))\n            // }\n        )\n    }\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='sign-up'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Sign Up</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Create Your Free Account</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    {errors.email && <p style={{ color: 'red' }}>{errors.email.message}</p>}\n\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message: 'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current || 'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_confirmation && (\n                                        <p style={{ color: 'red' }}>{errors.password_confirmation.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            Already have an account?\n                            <Link\n                                to='/signin'\n                                style={{\n                                    color: '#52616b',\n                                    fontWeight: '600px',\n                                    marginLeft: '5px',\n                                    textDecoration: 'none',\n                                }}>\n                                Sign In\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='sign-button' variant='white' type='submit'>\n                                Sign Up\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default SignUp;","import React from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmEmail = () => {\n    const { register, handleSubmit, errors } = useForm({\n        criteriaMode: 'all',\n    });\n\n    const onSubmit = (data) => {\n        axios.post(UrlService.forgotUrl(), data).then((res) => {\n            console.log(res);\n            alert(res.data.message)\n        }).catch((err) => {\n            alert(err.response.data.message)\n        });\n    };\n\n    return (\n        <>\n            <Container id='confirm-email'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your email</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text' controlId='formBasicEmail'>\n                                <Form.Label className='form-label'>Email</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            pattern: {\n                                                value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                message: 'Invalid Email Address',\n                                            },\n                                        })}\n                                        name='email'\n                                        className='from-control'\n                                        type='email'\n                                        placeholder='Enter Email'\n                                        required\n                                    />\n                                    <ErrorMessage\n                                        errors={errors}\n                                        name='email'\n                                        render={({ messages }) => {\n                                            return messages\n                                                ? Object.entries(messages).map(\n                                                    ([type, message]) => (\n                                                        <p style={{ color: 'red' }} key={type}>\n                                                            {message}\n                                                        </p>\n                                                    )\n                                                )\n                                                : null;\n                                        }}\n                                    />\n                                    <BsFillEnvelopeFill className='input-icon' />\n                                </div>\n                                <Form.Text className='text-muted'></Form.Text>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-email-button' variant='white' type='submit'>\n                                Send Password Reset Link\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmEmail;\n","import React, { useRef, useState } from 'react';\nimport './Authentication.css';\nimport { Container, Col, Row, Form, Button } from 'react-bootstrap';\nimport { BsFillEnvelopeFill, BsLockFill } from 'react-icons/bs';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport UrlService from './services/UrlService';\n\nconst ConfirmPassword = (props) => {\n    const { register, handleSubmit, errors, watch } = useForm({\n        criteriaMode: 'all',\n        defaultValues: {\n            token: props.match.params.token,\n        }\n    });\n\n    // Handle Reset Password\n    const onSubmit = (data) => {\n        axios.post(UrlService.resetPasswordUrl(), data).then((res) => {\n            alert(res.data.message)\n        }).catch((err) => {\n            alert(err.response.data.message)\n        });\n    };\n\n\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    return (\n        <>\n            <Container id='confirm-password'>\n                <Row className='justify-content-center'>\n                    <p className='form-title'>Reset Password</p>\n                </Row>\n                <Row className='justify-content-center paragraph'>\n                    <p className='mb-5 form-subtitle'>Please enter your new password</p>\n                </Row>\n                <Form fluid='md' onSubmit={handleSubmit(onSubmit)}>\n\n                    <Row className='justify-content-center'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>New Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='token'\n                                        type='hidden'\n                                        ref={register}\n                                    />\n                                    <Form.Control\n                                        autoComplete='off'\n                                        name='password'\n                                        type='password'\n                                        ref={register({\n                                            required: 'This is required.',\n                                            minLength: {\n                                                value: 8,\n                                                message: 'Password must have at least 8 characters',\n                                            },\n                                            maxLength: {\n                                                value: 20,\n                                                message:\n                                                    'Password must have less than 20 characters',\n                                            },\n                                        })}\n                                        required\n                                        placeholder='Enter password'\n                                    />\n                                    {errors.password && (\n                                        <p style={{ color: 'red' }}>{errors.password.message}</p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className='justify-content-center mb-3'>\n                        <Col lg={5} md={8} sm={10} xs={11}>\n                            <Form.Group className='label-text'>\n                                <Form.Label className='form-label'>Confirm Password</Form.Label>\n                                <div className='input-field'>\n                                    <Form.Control\n                                        autoComplete='off'\n                                        required\n                                        placeholder='Confirm Password'\n                                        name='password_confirmation'\n                                        type='password'\n                                        ref={register({\n                                            validate: (value) =>\n                                                value === password.current ||\n                                                'The passwords do not match',\n                                        })}\n                                    />\n                                    {errors.password_repeat && (\n                                        <p style={{ color: 'red' }}>\n                                            {errors.password_repeat.message}\n                                        </p>\n                                    )}\n                                    <BsLockFill className='input-icon'></BsLockFill>\n                                </div>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row className='mb-4'>\n                        <Col style={{ textAlign: 'center' }}>\n                            <Button className='confirm-password-button' variant='white' type='submit'>\n                                Reset Password\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        </>\n    );\n};\n\nexport default ConfirmPassword;\n","import React from 'react'\nimport './App.css';\n\nconst Nav = (props) => {\n    const navMenu = [\n        'Random Picker',\n        'Custom List',\n        'Decision Maker',\n        'Name Picker',\n        'Team Generator',\n        'Yes or No',\n    ];\n    const [active, setActive] = React.useState(null);\n\n    const handleSelectRandomizer = (id, item) => {\n        setActive(id)\n        props.onSelectRandomizer(item)\n    };\n\n    let randomizer_nav = \"randomizer-nav\";\n    return (\n        <ul className='randomizer-navbar'>\n            {\n                navMenu.map((item, index) => (\n                    <li id=\"myDIV\" className={\n                        index === active ? \"active\" : \"randomizer-nav\"\n                    } onClick={() => handleSelectRandomizer(index, item)}>{item}</li>\n                ))\n            }\n        </ul>\n    );\n};\n\nexport default Nav;\n\n        // <li className='randomizer-nav active' onClick={() => handleSelectRandomizer('Custom List')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Decision Maker')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Name Picker')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Team Generator')} activeClass=\"active\">a</li>\n        // <li className='randomizer-nav' onClick={() => props.onSelectRandomizer('Yes or No')}>a</li>\n","import React, { useLayoutEffect } from 'react';\nimport { Button, Row, Col, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\n\nexport default class Body extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTextareaValue: '',\n            qty: React.createRef(),\n            data: \"\",\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const a = this.state.data;\n        const b = a.split('\\n').filter((item) => item !== '');\n\n        if (this.props.teamGenerator) {\n            this.props.onGetQty(this.state.qty.current.value);\n            this.props.onGetData(b);\n        } else {\n            this.props.onGetData(b);\n        }\n        if (this.props.getType == 6) {\n            this.setState({\n                data: \"Yes\\nNo\"\n            })\n        }\n\n    }\n    handleChange(event) {\n        this.setState({ data: event.target.value });\n\n    }\n    render() {\n        let shows;\n        let teamGen;\n        let picker;\n        let customList;\n\n        if (this.props.teamGenerator) {\n            shows = (\n                <div className=\"justify-content-center\">\n                    <label className='txt-group justify-content-center'>Groups </label>\n                    <input type='number' ref={this.state.qty} className='input-qty' />\n                </div>\n            );\n\n            teamGen = (\n                <div className='result-body-teamgen'>\n                    {this.props.getResult.map((item, index) => (\n                        <ul key={index}>\n                            <h5>Team {index + 1}</h5>\n                            <li>{item.join(' /  ')}</li>\n                        </ul>\n                    ))}\n                </div>\n            );\n        }\n\n\n        picker = <div className='result-body'>{this.props.getResult}</div>;\n\n        customList = (\n            <div className='result-body-teamgen'>\n                {this.props.getResult.map((item, index) => (\n                    <ul key={index}>\n                        {index + 1}. {item}\n                    </ul>\n                ))}\n            </div>\n        );\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Row className='randomizer-body'>\n                    <Form.Group controlId='exampleForm.ControlTextarea1' className='result-item-nav'>\n                        <Form.Label>ITEMS :</Form.Label>\n                        <Form.Control\n                            as='textarea'\n                            rows={15}\n                            className='item-body'\n                            value={this.state.data}\n                            onChange={this.handleChange}\n                        // ref={this.state.data}\n                        />\n                    </Form.Group>\n                    <Form.Group className='result-item-nav'>\n                        <Form.Label>RESULT : </Form.Label>\n                        {this.props.teamGenerator\n                            ? teamGen\n                            : this.props.customListItem\n                                ? customList\n                                : picker}\n                        {/*<Form.Control readOnly rows={15} value={this.props.getResult}></Form.Control>*/}\n                    </Form.Group>\n                </Row>\n                <Row className='justify-content-md-center body-sumbit'>\n                    <Col md='auto'>{shows}</Col>\n                    <Col md=' auto'>\n                        <Button\n                            as='input'\n                            type='submit'\n                            variant='secondary'\n                            value='Submit'\n                            className='submit'\n                        />{' '}\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n","import react, { Component } from 'react';\nimport Nav from './Nav';\nimport Body from './Body';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\nimport axios from 'axios';\nimport UrlService from '../services/UrlService';\nimport { Redirect } from 'react-router';\nimport SaveIcon from '@material-ui/icons/Save';\n\nexport default class randomizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            result: [],\n            activeRandomizer: 1,\n            qty: 0,\n            tGenerator: false,\n            customList: false,\n        };\n        this.handleSelectConverter = this.handleSelectConverter.bind(this);\n    }\n\n    handleSelectConverter(con) {\n        this.setState({\n            activeRandomizer: this.handleType(con),\n        });\n    }\n\n    setResult(result) {\n        this.setState({\n            result: result,\n        });\n    }\n\n    handleGetQty = (qty) => {\n        this.setState({\n            qty: qty,\n        });\n    };\n\n    handleGetData = (items) => {\n        this.setState({\n            items,\n        });\n        axios\n            .post(UrlService.handleRandomizer(), {\n                type: this.state.activeRandomizer,\n                data: { items, qty: this.state.qty },\n            })\n            .then((res) => {\n                console.log(res);\n                this.setResult(res.data.result);\n                console.log(this.state.result);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    handleSave = () => {\n        let data = {};\n        if (this.state.tGenerator) {\n            data = {\n                type: this.state.activeRandomizer,\n                data: {\n                    items: this.state.items,\n                    qty: this.state.activeRandomizer,\n                    result: this.state.result,\n                },\n            };\n        } else {\n            data = {\n                type: this.state.activeRandomizer,\n                data: { items: this.state.items, result: this.state.result },\n            };\n        }\n        console.log(data);\n\n        axios\n            .post(UrlService.SaveRandomizer(), data)\n            .then((res) => {\n                alert(res.data.message);\n            })\n            .catch((err) => {\n                alert(err.response.data.message);\n            });\n    };\n\n    handleType = (data) => {\n        let type = null;\n        this.setState({ tGenerator: false, customList: false, result: [], items: [] });\n        switch (data) {\n            case 'Random Picker':\n                type = 1;\n                break;\n            case 'Custom List':\n                type = 2;\n                this.setState({\n                    customList: true,\n                });\n                break;\n            case 'Decision Maker':\n                type = 3;\n                break;\n            case 'Name Picker':\n                type = 4;\n                break;\n            case 'Team Generator':\n                type = 5;\n                this.setState({\n                    tGenerator: true,\n                });\n                break;\n            case 'Yes or No':\n                type = 6;\n                break;\n            default:\n                break;\n        }\n        return type;\n    };\n\n    render() {\n        if (!this.props.user) {\n            return <Redirect to='/SignIn' />;\n        }\n        return (\n            <div className=\"randomizer-dev\">\n                <Row className='justify-content-end m-2'>\n                    <Button\n                        variant='contained'\n                        size='meddium'\n                        onClick={this.handleSave}\n                        startIcon={<SaveIcon />}\n                        style={{ margin: '20px 5px', outline: 'none' }}\n                    >\n                        Save\n                    </Button>\n                </Row>\n                <div className='randomizer'>\n                    <Row>\n                        <Nav onSelectRandomizer={this.handleSelectConverter} />\n                        <Body\n                            onGetData={this.handleGetData}\n                            teamGenerator={this.state.tGenerator}\n                            customListItem={this.state.customList}\n                            getResult={this.state.result}\n                            onGetQty={this.handleGetQty}\n                            getType={this.state.activeRandomizer}\n                        />\n                    </Row>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { useEffect } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport UrlService from '../services/UrlService';\nimport Table from '@material-ui/core/Table';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport axios from 'axios';\n\nexport default function InteractiveList() {\n    const [data, setData] = React.useState([]);\n\n    useEffect(() => {\n        axios\n            .get(UrlService.SaveRandomizerList())\n            .then((res) => {\n                setData(res.data);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, []);\n\n    const handleExport = () => {\n\n        axios\n            .get(UrlService.ExportUrl(), {\n                responseType: \"blob\",\n            })\n            .then((response) => {\n                const fileURL = window.URL.createObjectURL(new Blob([response.data]));\n                const fileLink = document.createElement(\"a\");\n\n                fileLink.href = fileURL;\n                fileLink.setAttribute(\"download\", \"random.xls\");\n                document.body.appendChild(fileLink);\n\n                fileLink.click();\n            });\n    };\n    return (\n        <div style={{ margin: '50px' }}>\n            <Grid container justify='center'>\n                <Grid item xs={8}>\n                    <Typography variant='h6'>Randomizer Infromation</Typography>\n                    <Grid>\n                        <Table size='small' aria-label='a dense table'>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>#</TableCell>\n                                    <TableCell align='right'>Type</TableCell>\n                                    <TableCell align='right'>Items</TableCell>\n                                    <TableCell align='right'>Result</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((item, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component='th' scope='row'>\n                                            {index + 1}\n                                        </TableCell>\n                                        <TableCell align='right'>{item.type}</TableCell>\n                                        <TableCell align='right'>\n                                            {item.data.items.join(' | ')}\n                                        </TableCell>\n                                        <TableCell align='right'>\n                                            {item.data.result.join(' | ')}\n                                        </TableCell>\n                                        {/*<TableCell align=\"right\">\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={handleDelete(item.id)}\n                                                startIcon={<DeleteIcon />}\n                                            >\n                                            </Button>\n                                        </TableCell>\n                                        */}\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Grid>\n                </Grid>\n                <Grid style={{ margin: '30px' }}>\n                    <Button\n                        variant='contained'\n                        className='bg-secondary text-light'\n                        onClick={handleExport}\n                        startIcon={<ImportExportIcon />}\n                    ></Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n// <div className={classes.demo}>\n//     <List>\n//         {data.map((item, index) => (\n\n//             <ListItem>\n//                 <ListItemAvatar>\n//                     <Avatar>\n//                         <FolderIcon />\n//                     </Avatar>\n//                 </ListItemAvatar>\n//                 <ListItemText\n//                     secondary={secondary ? 'Secondary text' : null}\n//                 >{index + 1},  {item.data.items.join(\",\")}  {item.data.result}</ListItemText>\n//                 <ListItemText\n//                     secondary={secondary ? 'Secondary text' : null}\n//                 ></ListItemText>\n//                 <ListItemText\n\n//                 >{ }</ListItemText>\n//                 <ListItemSecondaryAction>\n//                     <IconButton edge=\"end\" aria-label=\"delete\">\n//                         <DeleteIcon />\n//                     </IconButton>\n//                 </ListItemSecondaryAction>\n//             </ListItem>\n//         ))}\n//     </List>\n// </div>\n","import './UnitConverter.css';\nimport React, { useState, useEffect } from 'react';\nimport { Tabs, useTabState, Panel } from '@bumaga/tabs';\nimport { Col, Row, Button } from 'react-bootstrap';\nimport axios from 'axios';\n\nconst cn = (...args) => args.filter(Boolean).join(' ');\n\nconst Tab = ({ children }) => {\n    const { isActive, onClick } = useTabState();\n\n    return (\n        <button className={cn('tab', isActive && 'active')} onClick={onClick}>\n            {children}\n        </button>\n    );\n};\n\nconst UnitConverter = () => {\n    const [index, setIndex] = useState(0);\n    const [result, setResult] = useState();\n    const [value, setValue] = useState();\n    const [unitFrom, setUnitFrom] = useState([]);\n    const [unitTo, setUnitTo] = useState([]);\n\n    const handleSubmit = () => {\n        axios\n            .get(\n                `https://converter.doxxie.live/convert?from=${unitFrom}&to=${unitTo}&amount=${value}`\n            )\n            .then((res) => {\n                setResult(res.data.converted);\n                console.log(res.data.converted);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    useEffect(() => {\n        setIndex(1);\n    }, []);\n\n    return (\n        <div id='unit-converter'>\n            <Tabs state={[index, setIndex]}>\n                <div className='tab-list'>\n                    <Tab>Length</Tab>\n                    <Tab>Weight</Tab>\n                    <Tab>Volume</Tab>\n                    <Tab>Area</Tab>\n                    <Tab>Data</Tab>\n                    <Tab>Time</Tab>\n                    <Tab>Temperature</Tab>\n                </div>\n                <div className='tabs'>\n                    {/* Length */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m'>Meter</option>\n                                            <option value='km'>Kilometer</option>\n                                            <option value='cm'>Centimeter</option>\n                                            <option value='mm'>Millimeter</option>\n                                            <option value='mi'>Mile</option>\n                                            <option value='yd'>Yard</option>\n                                            <option value='ft'>Feet</option>\n                                            <option value='in'>Inch</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m'>Meter</option>\n                                            <option value='km'>Kilometer</option>\n                                            <option value='cm'>Centimeter</option>\n                                            <option value='mm'>Millimeter</option>\n                                            <option value='mi'>Mile</option>\n                                            <option value='yd'>Yard</option>\n                                            <option value='ft'>Feet</option>\n                                            <option value='in'>Inch</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/*  */}\n                    {/*  */}\n                    {/* Weight */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='g'>Gram</option>\n                                            <option value='kg'>Kilogram</option>\n                                            <option value='mg'>Miligram</option>\n                                            <option value='lb'>Pound</option>\n                                            <option value='t'>Ton</option>\n                                            <option value='mt'>Metric Ton</option>\n                                            <option value='oz'>Ounce</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='g'>Gram</option>\n                                            <option value='kg'>Kilogram</option>\n                                            <option value='mg'>Miligram</option>\n                                            <option value='lb'>Pound</option>\n                                            <option value='t'>Ton</option>\n                                            <option value='mt'>Metric Ton</option>\n                                            <option value='oz'>Ounce</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Volume */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='ml'>Militer</option>\n                                            <option value='l'>Liter</option>\n                                            <option value='m3'>Cubic Meter</option>\n                                            <option value='km3'>Cubic Kilometer</option>\n                                            <option value='cm3'>Cubic Centimeter</option>\n                                            <option value='mm3'>Cubic Milimeter</option>\n                                            <option value='gal'>US Gallon</option>\n                                            <option value='qt'>US Quart</option>\n                                            <option value='cup'>US Cup</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='ml'>Militer</option>\n                                            <option value='l'>Liter</option>\n                                            <option value='m3'>Cubic Meter</option>\n                                            <option value='km3'>Cubic Kilometer</option>\n                                            <option value='cm3'>Cubic Centimeter</option>\n                                            <option value='mm3'>Cubic Milimeter</option>\n                                            <option value='gal'>US Gallon</option>\n                                            <option value='qt'>US Quart</option>\n                                            <option value='cup'>US Cup</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Area */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m2'>Square Meter</option>\n                                            <option value='km2'>Square Kilometer</option>\n                                            <option value='cm2'>Square Centimeter</option>\n                                            <option value='mm2'>Square Millimeter</option>\n                                            <option value='in2'>Square Inch</option>\n                                            <option value='mi2'>Square Mile</option>\n                                            <option value='yd2'>Square Yard</option>\n                                            <option value='ha'>Hectare</option>\n                                            <option value='ac'>Acres</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='m2'>Square Meter</option>\n                                            <option value='km2'>Square Kilometer</option>\n                                            <option value='cm2'>Square Centimeter</option>\n                                            <option value='mm2'>Square Millimeter</option>\n                                            <option value='in2'>Square Inch</option>\n                                            <option value='mi2'>Square Mile</option>\n                                            <option value='yd2'>Square Yard</option>\n                                            <option value='ha'>Hectare</option>\n                                            <option value='ac'>Acres</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Data */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='b'>Byte</option>\n                                            <option value='Kb'>Kilobyte</option>\n                                            <option value='Mb'>Megabyte</option>\n                                            <option value='Gb'>Gigabyte</option>\n                                            <option value='Tb'>Terabyte</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='b'>Byte</option>\n                                            <option value='Kb'>Kilobyte</option>\n                                            <option value='Mb'>Megabyte</option>\n                                            <option value='Gb'>Gigabyte</option>\n                                            <option value='Tb'>Terabyte</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Time */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='s'>Second</option>\n                                            <option value='ms'>Millisecond</option>\n                                            <option value='min'>Minute</option>\n                                            <option value='h'>Hour</option>\n                                            <option value='d'>Day</option>\n                                            <option value='week'>Week</option>\n                                            <option value='month'>Month</option>\n                                            <option value='year'>Year</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='s'>Second</option>\n                                            <option value='ms'>Millisecond</option>\n                                            <option value='min'>Minute</option>\n                                            <option value='h'>Hour</option>\n                                            <option value='d'>Day</option>\n                                            <option value='week'>Week</option>\n                                            <option value='month'>Month</option>\n                                            <option value='year'>Year</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    {/* Temperature */}\n                    <Panel>\n                        <div className='panel-container'>\n                            <div className='unit-from'>\n                                <div>\n                                    <p className='panel-style'>FROM:</p>\n                                </div>\n                                <form>\n                                    <div>\n                                        <input\n                                            type='number'\n                                            className='input-style'\n                                            value={value}\n                                            onChange={(e) => setValue(e.target.value)}\n                                        />\n                                    </div>\n                                </form>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitFrom}\n                                            onChange={(e) => setUnitFrom([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='C'>Celsius</option>\n                                            <option value='K'>Kelvin</option>\n                                            <option value='F'>Fahrenheit</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                            <div className='unitTo'>\n                                <div>\n                                    <p className='panel-style'>TO:</p>\n                                </div>\n                                <div className='display-style'>\n                                    <p>{result}</p>\n                                </div>\n                                <form className='unit-converter'>\n                                    <div className='list-container'>\n                                        <select\n                                            className='list-style'\n                                            value={unitTo}\n                                            onChange={(e) => setUnitTo([e.target.value])}\n                                            multiple\n                                        >\n                                            <option value='C'>Celsius</option>\n                                            <option value='K'>Kelvin</option>\n                                            <option value='F'>Fahrenheit</option>\n                                        </select>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </Panel>\n                </div>\n            </Tabs>\n            <div>\n                <Row className='mb-4'>\n                    <Col style={{ textAlign: 'center' }}>\n                        <Button className='submit-button' variant='white' onClick={handleSubmit}>\n                            Submit\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        </div>\n    );\n};\n\nexport default UnitConverter;\n","import React from 'react';\nimport Header from './Header';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport BasicCal from './basicCal/component/App';\nimport SignIn from './SignIn';\nimport SignUp from './SignUp';\nimport ConfirmEmail from './ConfirmEmail';\nimport ConfirmPassword from './ConfirmPassword';\nimport Randomizer from './randomizer/App';\nimport UrlService from \"./services/UrlService\";\nimport axios from 'axios';\nimport InformationRandomizer from './randomizer/InformationRandomizer';\nimport ScientificCalculator from './ScientificCalculator';\nimport UnitConverter from './UnitConverter';\n\nexport default class Main extends React.Component {\n    state = { ready: false };\n\n    componentDidMount = () => {\n        axios.get(UrlService.currentUserProfileUrl()).then(\n            res => {\n                this.setUser(res.data)\n            }\n        ).catch(\n            err => {\n                console.log(err)\n            }\n        ).finally(() => {\n            this.setState({ ready: true })\n        })\n    }\n\n    setUser = user => {\n        this.setState({\n            user: user\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Header user={this.state.user} setUser={this.setUser} />\n                <Switch>\n                    <Redirect exact from=\"/CAL_SMAi-TMEi\" to=\"/BasicCalculator\" />\n                    <Route path={'/BasicCalculator'} component={BasicCal} />\n                    {this.state.ready && <Route path={'/signin'} component={() => <SignIn setUser={this.setUser} />} />}\n                    <Route path={'/signup'} component={() => <SignUp setUser={this.setUser} />} />\n                    <Route path={'/password/forgot'} component={ConfirmEmail} />\n                    <Route path={'/password/reset/:token'} component={ConfirmPassword} />\n                    <Route path={'/randomizer/information'} component={InformationRandomizer} />\n                    {this.state.ready && <Route path={'/randomizer'} component={() => <Randomizer user={this.state.user} setUser={this.setUser} />} />}\n                    <Route path='/ScientificCalculator' component={ScientificCalculator} />\n                    <Route path='/UnitConverter' component={UnitConverter} />\n                </Switch>\n            </div>\n        );\n    }\n};\n\n","import './App.css';\nimport Main from './components/Main';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <Router>\n            <div className='App'>\n                <Main />\n            </div>\n        </Router>\n    );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from 'axios'\n\naxios.defaults.headers.common['Authorization'] = 'Bearer ' + localStorage.getItem('access_token')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { Component } from 'react';\nimport './ScientificCalculator.css';\nimport PointTarget from 'react-point';\n\nclass AutoScalingText extends Component {\n    state = {\n        scale: 1,\n    };\n\n    componentDidUpdate() {\n        const { scale } = this.state;\n        const node = this.node;\n        const parentNode = node.parentNode;\n        const availableWidth = parentNode.offsetWidth;\n        const actualWidth = node.offsetWidth;\n        const actualScale = availableWidth / actualWidth;\n\n        if (scale === actualScale) return;\n\n        if (actualScale < 1) {\n            this.setState({ scale: actualScale });\n        } else if (scale < 1) {\n            this.setState({ scale: 1 });\n        }\n    }\n\n    render() {\n        const { scale } = this.state;\n\n        return (\n            <div\n                className='auto-scaling-text'\n                style={{ transform: `scale(${scale},${scale})` }}\n                ref={(node) => (this.node = node)}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nclass CalculatorDisplay extends Component {\n    render() {\n        const { value, ...props } = this.props;\n        const language = navigator.language || 'en-US';\n        const escapedKeys = [' e ', 'E', '*', '(', ')', 'r', 'o'];\n        let isNumeric = true;\n\n        escapedKeys.forEach((key) => {\n            if (value.includes(key)) isNumeric = false;\n        });\n\n        const parsedValue = isNumeric ? parseFloat(value) : value;\n\n        let formattedValue = parsedValue.toLocaleString(language, {\n            useGrouping: true,\n            maximumFractionDigits: 10,\n        });\n\n        if (value.endsWith('.')) formattedValue += '.';\n\n        return (\n            <div {...props}>\n                <AutoScalingText>{formattedValue}</AutoScalingText>\n            </div>\n        );\n    }\n}\n\nclass CalculatorKey extends Component {\n    render() {\n        const { onPress, className, ...props } = this.props;\n\n        return (\n            <PointTarget onPoint={onPress}>\n                <button className={`calculator-key ${className}`} {...props} />\n            </PointTarget>\n        );\n    }\n}\n\nconst CalculatorOperations = {\n    '/': (prevValue, nextValue) => prevValue / nextValue,\n    '*': (prevValue, nextValue) => prevValue * nextValue,\n    '+': (prevValue, nextValue) => prevValue + nextValue,\n    '-': (prevValue, nextValue) => prevValue - nextValue,\n    '=': (prevValue, nextValue) => nextValue,\n    nthRoot: (prevValue, nextValue) => Math.pow(nextValue, 1 / prevValue),\n    xPowY: (prevValue, nextValue) => Math.pow(prevValue, nextValue),\n    yPowX: (prevValue, nextValue) => Math.pow(nextValue, prevValue),\n    logY: (prevValue, nextValue) => Math.log(nextValue) / Math.log(prevValue),\n};\n\nclass ScientificCalculator extends Component {\n    state = {\n        value: null,\n        displayValue: '0',\n        operator: null,\n        waitingForOperand: false,\n        done: false,\n        shift: false,\n        degree: false,\n        ee: false,\n        isMemoryActive: false,\n        isBracketsActive: false,\n        isLeftBracket: false,\n        isRightBracket: false,\n        isDigit: false,\n        isOperator: false,\n        countBracket: 0,\n        checkLeftBracket: false,\n        memory: {\n            memory_plus: 0,\n            memory_minus: 0,\n            memory_recall: null,\n        },\n    };\n\n    degreeClick = () => {\n        this.setState((state) => {\n            return {\n                degree: !state.degree,\n            };\n        });\n    };\n\n    shiftClick = () => {\n        this.setState((state) => {\n            return {\n                shift: !state.shift,\n            };\n        });\n    };\n\n    clearAll() {\n        this.setState({\n            value: null,\n            displayValue: '0',\n            operator: null,\n            waitingForOperand: false,\n            done: false,\n            ee: false,\n            isMemoryActive: false,\n            isBracketsActive: false,\n            isRightBracket: false,\n            isLeftBracket: false,\n            isDigit: false,\n            isOperator: false,\n            countBracket: 0,\n            checkLeftBracket: false,\n        });\n    }\n\n    clearDisplay() {\n        this.setState({\n            displayValue: '0',\n        });\n    }\n\n    clearLastChar() {\n        const { displayValue } = this.state;\n\n        this.setState({\n            displayValue: displayValue.substring(0, displayValue.length - 1) || '0',\n        });\n    }\n\n    toggleSign() {\n        const { displayValue } = this.state;\n        const newValue = parseFloat(displayValue) * -1;\n\n        this.setState({\n            displayValue: String(newValue),\n        });\n    }\n\n    inputPercent() {\n        const { displayValue } = this.state;\n        const currentValue = parseFloat(displayValue);\n\n        if (currentValue === 0) return;\n\n        const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '');\n        const newValue = parseFloat(displayValue) / 100;\n\n        this.setState({\n            displayValue: String(newValue.toFixed(fixedDigits.length + 2)),\n            done: true,\n        });\n    }\n\n    inputDot() {\n        const { displayValue, waitingForOperand, isRightBracket } = this.state;\n\n        if (waitingForOperand === true) {\n            this.setState({ displayValue: '0.', waitingForOperand: false });\n        } else if (!/\\./.test(displayValue)) {\n            this.setState({\n                displayValue: displayValue + '.',\n                waitingForOperand: false,\n            });\n        }\n    }\n\n    inputDigit(digit) {\n        const { displayValue, waitingForOperand, done, isRightBracket } = this.state;\n\n        if (waitingForOperand) {\n            this.setState({\n                displayValue: String(digit),\n                waitingForOperand: false,\n                isDigit: true,\n            });\n        } else {\n            const hasDot = displayValue.includes('.');\n            const integer = displayValue.split('.')[0];\n\n            if (!hasDot && integer.length >= 10) return;\n\n            if (done === true) {\n                this.clearAll();\n                this.setState({ displayValue: String(digit), isDigit: true, isOperator: false });\n            } else {\n                this.setState({\n                    displayValue: displayValue === '0' ? String(digit) : displayValue + digit,\n                    isDigit: true,\n                    isOperator: true,\n                    checkLeftBracket: false,\n                });\n            }\n        }\n    }\n\n    performOperation(nextOperator) {\n        const {\n            value,\n            displayValue,\n            operator,\n            waitingForOperand,\n            isMemoryActive,\n            isbracketsActive,\n            isRightBracket,\n            isLeftBracket,\n            isDigit,\n            isOperator,\n            ee,\n            countBracket,\n        } = this.state;\n\n        if (nextOperator === '=' && countBracket !== 0) {\n            return this.setState({\n                displayValue: 'Error',\n                isbracketsActive: false,\n                done: true,\n            });\n        }\n\n        if (isOperator === false) {\n            return this.setState({ displayValue });\n        }\n\n        if (isbracketsActive === true && nextOperator === '=') {\n            return this.setState({\n                displayValue: String(eval(displayValue)),\n                isbracketsActive: false,\n                done: true,\n            });\n        } else if (isbracketsActive === true) {\n            if (isDigit) {\n                this.setState({\n                    displayValue: displayValue + nextOperator,\n                    isOperator: false,\n                    isDigit: false,\n                    checkLeftBracket: false,\n                });\n            }\n        } else {\n            const inputValue = parseFloat(displayValue);\n\n            if (ee === true) {\n                const currentValue = displayValue.replace(/\\s/g, '');\n                return this.setState({\n                    displayValue: parseFloat(currentValue).toPrecision(),\n                    done: true,\n                    ee: false,\n                });\n            }\n\n            if (value == null) {\n                this.setState({\n                    value: inputValue,\n                });\n            } else if (\n                (operator && waitingForOperand === false) ||\n                (operator && isMemoryActive === true)\n            ) {\n                const currentValue = parseFloat(value) || 0;\n                const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n                this.setState({\n                    value: newValue,\n                    displayValue: String(newValue),\n                    isMemoryActive: false,\n                });\n            }\n\n            this.setState({\n                waitingForOperand: true,\n                operator: nextOperator,\n            });\n        }\n    }\n\n    keyDown = (event) => {\n        let { key } = event;\n\n        if (key === 'Enter') key = '=';\n\n        if (/\\d/.test(key)) {\n            event.preventDefault();\n            this.inputDigit(parseInt(key, 10));\n        } else if (key in CalculatorOperations) {\n            event.preventDefault();\n            this.performOperation(key);\n        } else if (key === '.') {\n            event.preventDefault();\n            this.inputDot();\n        } else if (key === '%') {\n            event.preventDefault();\n            this.inputPercent();\n        } else if (key === 'Backspace') {\n            event.preventDefault();\n            this.clearLastChar();\n        } else if (key === 'Clear') {\n            event.preventDefault();\n\n            if (this.state.displayValue !== '0') {\n                this.clearDisplay();\n            } else {\n                this.clearAll();\n            }\n        }\n    };\n\n    memoryClear() {\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: 0,\n                memory_minus: 0,\n                memory_recall: null,\n            },\n            isMemoryActive: false,\n        }));\n    }\n\n    memoryPlus() {\n        let temp = parseFloat(this.state.displayValue) + this.state.memory.memory_plus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_plus: temp,\n            },\n        }));\n    }\n\n    memoryMinus() {\n        let temp = parseInt(this.state.displayValue) + this.state.memory.memory_minus;\n        this.setState((prevState) => ({\n            memory: {\n                ...prevState.memory,\n                memory_minus: temp,\n            },\n        }));\n    }\n\n    memoryRecall() {\n        const { displayValue } = this.state;\n        let temp = (this.state.memory.memory_plus - this.state.memory.memory_minus).toString();\n\n        if (displayValue !== '0') {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: true,\n            });\n        } else {\n            this.setState({\n                displayValue: temp,\n                isMemoryActive: false,\n                done: true,\n            });\n        }\n    }\n\n    power2() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 2)), done: true });\n    }\n\n    power3() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(parseFloat(displayValue), 3)), done: true });\n    }\n\n    tenPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(10, parseFloat(displayValue))), done: true });\n    }\n\n    twoPowerX() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.pow(2, parseFloat(displayValue))), done: true });\n    }\n\n    // pi() {\n    //     this.setState({ displayValue: String(Math.PI) });\n    // }\n\n    // exponent() {\n    //     this.setState({ displayValue: String(Math.exp(1)) });\n    // }\n\n    rand() {\n        this.setState({ displayValue: String(Math.random()) });\n    }\n\n    sin() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.sin(displayValue)), done: true });\n        } else {\n            const result = String(Math.sin((parseFloat(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cos() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.cos(displayValue)), done: true });\n        } else {\n            const result = String(Math.cos((parseInt(displayValue) * Math.PI) / 180));\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tan() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.tan(displayValue)), done: true });\n        } else {\n            if (displayValue === '90' || displayValue === '270') {\n                this.setState({ displayValue: 'Not a number' });\n            } else {\n                const result = String(Math.tan((parseFloat(displayValue) * Math.PI) / 180));\n                this.setState({ displayValue: result, done: true });\n            }\n        }\n    }\n\n    sinh() {\n        const { displayValue } = this.state;\n        const result = String(Math.sinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    cosh() {\n        const { displayValue } = this.state;\n        const result = String(Math.cosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanh() {\n        const { displayValue } = this.state;\n        const result = String(Math.tanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    sinInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.asin(displayValue)), done: true });\n        } else {\n            const result = String((Math.asin(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    cosInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.acos(displayValue)), done: true });\n        } else {\n            const result = String((Math.acos(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    tanInverse() {\n        const { displayValue, degree } = this.state;\n\n        if (degree === false) {\n            this.setState({ displayValue: String(Math.atan(displayValue)), done: true });\n        } else {\n            const result = String((Math.atan(parseFloat(displayValue)) * 180) / Math.PI);\n            this.setState({ displayValue: result, done: true });\n        }\n    }\n\n    sinhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.asinh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    coshInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.acosh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    tanhInverse() {\n        const { displayValue } = this.state;\n        const result = String(Math.atanh(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    squareRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.sqrt(parseFloat(displayValue))), done: true });\n    }\n\n    cubeRoot() {\n        const { displayValue } = this.state;\n        this.setState({ displayValue: String(Math.cbrt(parseFloat(displayValue))), done: true });\n    }\n\n    factorial() {\n        const { displayValue } = this.state;\n\n        if (displayValue.indexOf('.') !== -1) {\n            return this.setState({ displayValue: 'NaN' });\n        }\n\n        if (displayValue === '1' || displayValue === '-1') {\n            return this.setState({ displayValue });\n        } else if (parseInt(displayValue) > 1) {\n            var result = 1;\n\n            for (var i = 1; i <= parseInt(displayValue); ++i) {\n                result *= i;\n            }\n\n            return this.setState({ displayValue: String(result), done: true });\n        } else if (parseInt(displayValue) < -1) {\n            var resultNegative = 1;\n\n            for (var j = -1; j >= parseInt(displayValue); j--) {\n                resultNegative *= j;\n            }\n\n            return this.setState({ displayValue: String(resultNegative), done: true });\n        }\n    }\n\n    log10() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log10(parseFloat(displayValue))), done: true });\n    }\n\n    log2() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log2(parseFloat(displayValue))), done: true });\n    }\n\n    log() {\n        const { displayValue } = this.state;\n\n        if (parseInt(displayValue) <= 0) {\n            return this.setState({ displayValue: 'Not a Number' });\n        }\n\n        this.setState({ displayValue: String(Math.log(parseFloat(displayValue))), done: true });\n    }\n\n    multiplicativeInverse() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            this.setState({ displayValue: 'Not a number' });\n        }\n\n        const result = String(1 / displayValue);\n        this.setState({ displayValue: result, done: true });\n    }\n\n    exponential() {\n        const { displayValue } = this.state;\n\n        if (displayValue === '0') {\n            return this.setState({ displayValue: '1' });\n        }\n\n        const result = String(Math.exp(parseFloat(displayValue)));\n        this.setState({ displayValue: result, done: true });\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyDown);\n    }\n\n    ee() {\n        const { displayValue, done, ee } = this.state;\n\n        if (done === false) {\n            if (ee === true) {\n                this.setState({ displayValue });\n            } else {\n                this.setState({ displayValue: displayValue + ' e ', ee: true });\n            }\n        }\n    }\n\n    leftBracket() {\n        const { displayValue, isDigit, isOperator } = this.state;\n\n        this.setState({\n            displayValue:\n                displayValue === '0' || displayValue === 'Error'\n                    ? '('\n                    : isDigit === true && isOperator === false\n                        ? displayValue + '*('\n                        : displayValue + '(',\n            isbracketsActive: true,\n            isRightBracket: false,\n            isLeftBracket: true,\n            isDigit: false,\n        });\n    }\n\n    rightBracket() {\n        const { displayValue, isLeftBracket, isDigit } = this.state;\n\n        if (isLeftBracket && isDigit) {\n            this.setState({\n                displayValue: displayValue === '0' ? ')' : displayValue + ')',\n                isbracketsActive: true,\n                isRightBracket: true,\n            });\n        }\n    }\n\n    render() {\n        const { displayValue } = this.state;\n        const clearDisplay = displayValue !== '0';\n        const clearText = clearDisplay ? 'C' : 'AC';\n\n        return (\n            <div id='scientific-calculator'>\n                <div className='calculator-body'>\n                    <div class='resultContainer'>\n                        <div class='result'>\n                            <p>\n                                <CalculatorDisplay value={displayValue} />\n                            </p>\n                        </div>\n                    </div>\n                    <div className='button'>\n                        <div className='test'>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.leftBracket()}\n                            >\n                                (\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rightBracket()}\n                            >\n                                )\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryClear()}\n                            >\n                                mc\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryPlus()}\n                            >\n                                m+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryMinus()}\n                            >\n                                m-\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.memoryRecall()}\n                            >\n                                mr\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='clear'\n                                style={{ backgroundColor: '#BB4444', color: '#F0F5F9' }}\n                                onPress={() =>\n                                    clearDisplay ? this.clearDisplay() : this.clearAll()\n                                }\n                            >\n                                {clearText}\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.toggleSign()}\n                            >\n                                -/+\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputPercent()}\n                            >\n                                %\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('/')}\n                            >\n                                ÷\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.shiftClick}\n                                >\n                                    2\n                                    <sup>\n                                        <small>nd</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={this.shiftClick}\n                                    >\n                                        1\n                                        <sup>\n                                            <small>st</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power2()}\n                            >\n                                x\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power3()}\n                            >\n                                x\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.power2()}\n                            >\n                                x\n                                <sup>\n                                    <small>y</small>\n                                </sup>\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.exponential()}\n                                >\n                                    e\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.performOperation('yPowX')}\n                                    >\n                                        y\n                                        <sup>\n                                            <small>x</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tenPowerX()}\n                                >\n                                    10\n                                    <sup>\n                                        <small>x</small>\n                                    </sup>\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.twoPowerX()}\n                                    >\n                                        2\n                                        <sup>\n                                            <small>x</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(7)}\n                            >\n                                7\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(8)}\n                            >\n                                8\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(9)}\n                            >\n                                9\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('*')}\n                            >\n                                ×\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.multiplicativeInverse()}\n                            >\n                                1/x\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.squareRoot()}\n                            >\n                                <sup>\n                                    <small>2</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.cubeRoot()}\n                            >\n                                <sup>\n                                    <small>3</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('nthRoot')}\n                            >\n                                <sup>\n                                    <small>x</small>\n                                </sup>\n                                √\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log()}\n                                >\n                                    ln\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.performOperation('logY')}\n                                    >\n                                        log\n                                        <sub>\n                                            <small>y</small>\n                                        </sub>\n                                    </CalculatorKey>\n                                )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.log10()}\n                                >\n                                    log\n                                    <sub>\n                                        <small>10</small>\n                                    </sub>\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.log2()}\n                                    >\n                                        log\n                                        <sub>\n                                            <small>2</small>\n                                        </sub>\n                                    </CalculatorKey>\n                                )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(4)}\n                            >\n                                4\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(5)}\n                            >\n                                5\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(6)}\n                            >\n                                6\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('-')}\n                            >\n                                −\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.factorial()}\n                            >\n                                x!\n                            </CalculatorKey>\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sin()}\n                                >\n                                    sin\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.sinInverse()}\n                                    >\n                                        sin\n                                        <sup>\n                                            <small>-1</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cos()}\n                                >\n                                    cos\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.cosInverse()}\n                                    >\n                                        cos\n                                        <sup>\n                                            <small>-1</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tan()}\n                                >\n                                    tan\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.tanhInverse()}\n                                    >\n                                        tan\n                                        <sup>\n                                            <small>-1</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.exp(1))}\n                            >\n                                e\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(4)}\n                            >\n                                EE\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(1)}\n                            >\n                                1\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(2)}\n                            >\n                                2\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(3)}\n                            >\n                                3\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.performOperation('+')}\n                            >\n                                +\n                            </CalculatorKey>\n                            {!this.state.degree ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={this.degreeClick}\n                                >\n                                    Rad\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={this.degreeClick}\n                                    >\n                                        Deg\n                                    </CalculatorKey>\n                                )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.sinh()}\n                                >\n                                    sinh\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.sinhInverse()}\n                                    >\n                                        sinh\n                                        <sup>\n                                            <small>-1</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.cosh()}\n                                >\n                                    cosh\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.coshInverse()}\n                                    >\n                                        cosh\n                                        <sup>\n                                            <small>-1</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            {!this.state.shift ? (\n                                <CalculatorKey\n                                    style={{ backgroundColor: '#52616b' }}\n                                    onPress={() => this.tanh()}\n                                >\n                                    tanh\n                                </CalculatorKey>\n                            ) : (\n                                    <CalculatorKey\n                                        style={{ backgroundColor: '#52616b' }}\n                                        onPress={() => this.tanhInverse()}\n                                    >\n                                        tanh\n                                        <sup>\n                                            <small>-1</small>\n                                        </sup>\n                                    </CalculatorKey>\n                                )}\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(Math.PI)}\n                            >\n                                π\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.rand()}\n                            >\n                                Rand\n                            </CalculatorKey>\n                            <CalculatorKey\n                                className='zero'\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDigit(0)}\n                            >\n                                0\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#52616b' }}\n                                onPress={() => this.inputDot()}\n                            >\n                                .\n                            </CalculatorKey>\n                            <CalculatorKey\n                                style={{ backgroundColor: '#F0F5F9', color: '#52616b' }}\n                                onPress={() => this.performOperation('=')}\n                            >\n                                =\n                            </CalculatorKey>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ScientificCalculator;\n"],"sourceRoot":""}